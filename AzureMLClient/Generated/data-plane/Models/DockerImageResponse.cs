// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.MachineLearning.Services.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    [Newtonsoft.Json.JsonObject("WEBAPICONTAINER")]
    public partial class DockerImageResponse : ImageResponseBase
    {
        /// <summary>
        /// Initializes a new instance of the DockerImageResponse class.
        /// </summary>
        public DockerImageResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DockerImageResponse class.
        /// </summary>
        /// <param name="id">The image Id.</param>
        /// <param name="name">The image name.</param>
        /// <param name="version">The image version.</param>
        /// <param name="description">The image description.</param>
        /// <param name="kvTags">The image tag dictionary. Tags are
        /// mutable.</param>
        /// <param name="properties">The image properties dictionary.
        /// Properties are immutable.</param>
        /// <param name="createdTime">The time the image was created.</param>
        /// <param name="modifiedTime">The time the image was last
        /// modified.</param>
        /// <param name="autoDelete">Whether the image will be automatically
        /// deleted with the last service using it.</param>
        /// <param name="imageType">The type of the image. Possible values
        /// include: 'Docker'</param>
        /// <param name="creationState">The state of the operation. Possible
        /// values include: 'NotStarted', 'Running', 'Cancelled', 'Succeeded',
        /// 'Failed', 'TimedOut'</param>
        /// <param name="error">The error response.</param>
        /// <param name="modelIds">The list of model Ids.</param>
        /// <param name="modelDetails">The list of models.</param>
        /// <param name="imageLocation">The Image location string.</param>
        /// <param name="imageBuildLogUri">The Uri to the image build
        /// logs.</param>
        /// <param name="operationId">The ID of the asynchronous operation for
        /// this image.</param>
        /// <param name="driverProgram">The name of the driver file.</param>
        /// <param name="assets">The list of assets.</param>
        /// <param name="targetRuntime">The target runtime.</param>
        /// <param name="dockerFileUri">The Uri to the docker file.</param>
        /// <param name="generatedDockerFileUri">The Uri to the generated
        /// docker file.</param>
        public DockerImageResponse(string id = default(string), string name = default(string), long? version = default(long?), string description = default(string), IDictionary<string, string> kvTags = default(IDictionary<string, string>), IDictionary<string, string> properties = default(IDictionary<string, string>), System.DateTime? createdTime = default(System.DateTime?), System.DateTime? modifiedTime = default(System.DateTime?), bool? autoDelete = default(bool?), ImageType? imageType = default(ImageType?), AsyncOperationState? creationState = default(AsyncOperationState?), ModelErrorResponse error = default(ModelErrorResponse), IList<string> modelIds = default(IList<string>), IList<Model> modelDetails = default(IList<Model>), string imageLocation = default(string), string imageBuildLogUri = default(string), string operationId = default(string), string driverProgram = default(string), IList<EnvironmentImageAsset> assets = default(IList<EnvironmentImageAsset>), TargetRuntime targetRuntime = default(TargetRuntime), string dockerFileUri = default(string), string generatedDockerFileUri = default(string))
            : base(id, name, version, description, kvTags, properties, createdTime, modifiedTime, autoDelete, imageType, creationState, error, modelIds, modelDetails, imageLocation, imageBuildLogUri, operationId)
        {
            DriverProgram = driverProgram;
            Assets = assets;
            TargetRuntime = targetRuntime;
            DockerFileUri = dockerFileUri;
            GeneratedDockerFileUri = generatedDockerFileUri;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the driver file.
        /// </summary>
        [JsonProperty(PropertyName = "driverProgram")]
        public string DriverProgram { get; set; }

        /// <summary>
        /// Gets or sets the list of assets.
        /// </summary>
        [JsonProperty(PropertyName = "assets")]
        public IList<EnvironmentImageAsset> Assets { get; set; }

        /// <summary>
        /// Gets or sets the target runtime.
        /// </summary>
        [JsonProperty(PropertyName = "targetRuntime")]
        public TargetRuntime TargetRuntime { get; set; }

        /// <summary>
        /// Gets or sets the Uri to the docker file.
        /// </summary>
        [JsonProperty(PropertyName = "dockerFileUri")]
        public string DockerFileUri { get; set; }

        /// <summary>
        /// Gets or sets the Uri to the generated docker file.
        /// </summary>
        [JsonProperty(PropertyName = "generatedDockerFileUri")]
        public string GeneratedDockerFileUri { get; set; }

    }
}
