// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.MachineLearning.Services.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Base object for both request and response of
    /// HyperDrive_CreateExperiment api.
    /// </summary>
    public partial class HyperDriveExperimentBase
    {
        /// <summary>
        /// Initializes a new instance of the HyperDriveExperimentBase class.
        /// </summary>
        public HyperDriveExperimentBase()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HyperDriveExperimentBase class.
        /// </summary>
        /// <param name="generatorConfig">Hyperparameter space and the sampling
        /// method configuration.</param>
        /// <param name="name">Name of the Hyperdrive run.</param>
        /// <param name="platformConfig">Platform config object specifying the
        /// run definition structure.</param>
        /// <param name="policyConfig">Early termination policy
        /// configuration.</param>
        /// <param name="primaryMetricConfig">Name of the primary metric and
        /// goal of optimizing.</param>
        /// <param name="description">The description for Hyperdrive
        /// run.</param>
        /// <param name="maxConcurrentJobs">Maximum number of runs to run
        /// concurrently.</param>
        /// <param name="maxDurationMinutes">Maximum duration of the Hyperdrive
        /// run.</param>
        /// <param name="maxTotalJobs">Maximum number of runs.</param>
        /// <param name="studyId">Study Id of the Hyperdrive run.</param>
        public HyperDriveExperimentBase(HyperDriveExperimentBaseGeneratorConfig generatorConfig, string name, object platformConfig, HyperDrivePolicyConfigBase policyConfig, HyperDriveExperimentBasePrimaryMetricConfig primaryMetricConfig, string description = default(string), int? maxConcurrentJobs = default(int?), int? maxDurationMinutes = default(int?), int? maxTotalJobs = default(int?), int? studyId = default(int?))
        {
            Description = description;
            GeneratorConfig = generatorConfig;
            MaxConcurrentJobs = maxConcurrentJobs;
            MaxDurationMinutes = maxDurationMinutes;
            MaxTotalJobs = maxTotalJobs;
            Name = name;
            PlatformConfig = platformConfig;
            PolicyConfig = policyConfig;
            PrimaryMetricConfig = primaryMetricConfig;
            StudyId = studyId;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for HyperDriveExperimentBase class.
        /// </summary>
        static HyperDriveExperimentBase()
        {
            Platform = "AML";
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the description for Hyperdrive run.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets hyperparameter space and the sampling method
        /// configuration.
        /// </summary>
        [JsonProperty(PropertyName = "generator_config")]
        public HyperDriveExperimentBaseGeneratorConfig GeneratorConfig { get; set; }

        /// <summary>
        /// Gets or sets maximum number of runs to run concurrently.
        /// </summary>
        [JsonProperty(PropertyName = "max_concurrent_jobs")]
        public int? MaxConcurrentJobs { get; set; }

        /// <summary>
        /// Gets or sets maximum duration of the Hyperdrive run.
        /// </summary>
        [JsonProperty(PropertyName = "max_duration_minutes")]
        public int? MaxDurationMinutes { get; set; }

        /// <summary>
        /// Gets or sets maximum number of runs.
        /// </summary>
        [JsonProperty(PropertyName = "max_total_jobs")]
        public int? MaxTotalJobs { get; set; }

        /// <summary>
        /// Gets or sets name of the Hyperdrive run.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets platform config object specifying the run definition
        /// structure.
        /// </summary>
        [JsonProperty(PropertyName = "platform_config")]
        public object PlatformConfig { get; set; }

        /// <summary>
        /// Gets or sets early termination policy configuration.
        /// </summary>
        [JsonProperty(PropertyName = "policy_config")]
        public HyperDrivePolicyConfigBase PolicyConfig { get; set; }

        /// <summary>
        /// Gets or sets name of the primary metric and goal of optimizing.
        /// </summary>
        [JsonProperty(PropertyName = "primary_metric_config")]
        public HyperDriveExperimentBasePrimaryMetricConfig PrimaryMetricConfig { get; set; }

        /// <summary>
        /// Gets or sets study Id of the Hyperdrive run.
        /// </summary>
        [JsonProperty(PropertyName = "study_id")]
        public int? StudyId { get; set; }

        /// <summary>
        /// Platform of the Hyperdrive run.
        /// </summary>
        [JsonProperty(PropertyName = "platform")]
        public static string Platform { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (GeneratorConfig == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "GeneratorConfig");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (PlatformConfig == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PlatformConfig");
            }
            if (PolicyConfig == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PolicyConfig");
            }
            if (PrimaryMetricConfig == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PrimaryMetricConfig");
            }
            if (Description != null)
            {
                if (Description.Length > 511)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Description", 511);
                }
            }
            if (GeneratorConfig != null)
            {
                GeneratorConfig.Validate();
            }
            if (MaxConcurrentJobs > 100)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "MaxConcurrentJobs", 100);
            }
            if (MaxConcurrentJobs < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "MaxConcurrentJobs", 1);
            }
            if (MaxDurationMinutes > 43200)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "MaxDurationMinutes", 43200);
            }
            if (MaxDurationMinutes < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "MaxDurationMinutes", 1);
            }
            if (MaxTotalJobs > 1000)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "MaxTotalJobs", 1000);
            }
            if (MaxTotalJobs < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "MaxTotalJobs", 1);
            }
            if (Name != null)
            {
                if (Name.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 255);
                }
            }
            if (PrimaryMetricConfig != null)
            {
                PrimaryMetricConfig.Validate();
            }
            if (StudyId < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "StudyId", 0);
            }
        }
    }
}
