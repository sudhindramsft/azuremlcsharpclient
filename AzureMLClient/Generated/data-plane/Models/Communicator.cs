// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.MachineLearning.Services.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for Communicator.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum Communicator
    {
        [EnumMember(Value = "None")]
        None,
        [EnumMember(Value = "ParameterServer")]
        ParameterServer,
        [EnumMember(Value = "Gloo")]
        Gloo,
        [EnumMember(Value = "Mpi")]
        Mpi,
        [EnumMember(Value = "Nccl")]
        Nccl
    }
    internal static class CommunicatorEnumExtension
    {
        internal static string ToSerializedValue(this Communicator? value)
        {
            return value == null ? null : ((Communicator)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this Communicator value)
        {
            switch( value )
            {
                case Communicator.None:
                    return "None";
                case Communicator.ParameterServer:
                    return "ParameterServer";
                case Communicator.Gloo:
                    return "Gloo";
                case Communicator.Mpi:
                    return "Mpi";
                case Communicator.Nccl:
                    return "Nccl";
            }
            return null;
        }

        internal static Communicator? ParseCommunicator(this string value)
        {
            switch( value )
            {
                case "None":
                    return Communicator.None;
                case "ParameterServer":
                    return Communicator.ParameterServer;
                case "Gloo":
                    return Communicator.Gloo;
                case "Mpi":
                    return Communicator.Mpi;
                case "Nccl":
                    return Communicator.Nccl;
            }
            return null;
        }
    }
}
