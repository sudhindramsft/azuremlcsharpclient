// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.MachineLearning.Services.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Part of response for HyperDrive_CreateExperiment in case of success.
    /// Contains details about the created hyperdrive run.
    /// </summary>
    public partial class HyperDriveExperiment : HyperDriveExperimentBase
    {
        /// <summary>
        /// Initializes a new instance of the HyperDriveExperiment class.
        /// </summary>
        public HyperDriveExperiment()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HyperDriveExperiment class.
        /// </summary>
        /// <param name="generatorConfig">Hyperparameter space and the sampling
        /// method configuration.</param>
        /// <param name="name">Name of the Hyperdrive run.</param>
        /// <param name="platformConfig">Platform config object specifying the
        /// run definition structure.</param>
        /// <param name="policyConfig">Early termination policy
        /// configuration.</param>
        /// <param name="primaryMetricConfig">Name of the primary metric and
        /// goal of optimizing.</param>
        /// <param name="allJobsGenerated">Indicates if all runs have been
        /// generated.</param>
        /// <param name="cancellationRequested">Indicates if cancellation has
        /// been requested for this Hyperdrive run.</param>
        /// <param name="created">Hyperdrive run creation time.</param>
        /// <param name="createdByUserId">Id of the user who created the
        /// Hyperdrive run.</param>
        /// <param name="experimentId">Hyperdrive run id.</param>
        /// <param name="modified">Hyperdrive run modification time.</param>
        /// <param name="status">Hyperdrive run status.</param>
        /// <param name="hyperdriveRunId">Hyperdrive run id.</param>
        /// <param name="description">The description for Hyperdrive
        /// run.</param>
        /// <param name="maxConcurrentJobs">Maximum number of runs to run
        /// concurrently.</param>
        /// <param name="maxDurationMinutes">Maximum duration of the Hyperdrive
        /// run.</param>
        /// <param name="maxTotalJobs">Maximum number of runs.</param>
        /// <param name="studyId">Study Id of the Hyperdrive run.</param>
        /// <param name="experimentUri">Hyperdrive run Uri.</param>
        /// <param name="studyUri">Study Uri of the Hyperdrive run.</param>
        public HyperDriveExperiment(HyperDriveExperimentBaseGeneratorConfig generatorConfig, string name, object platformConfig, HyperDrivePolicyConfigBase policyConfig, HyperDriveExperimentBasePrimaryMetricConfig primaryMetricConfig, bool allJobsGenerated, bool cancellationRequested, System.DateTime created, int createdByUserId, string experimentId, System.DateTime modified, string status, string hyperdriveRunId, string description = default(string), int? maxConcurrentJobs = default(int?), int? maxDurationMinutes = default(int?), int? maxTotalJobs = default(int?), int? studyId = default(int?), string experimentUri = default(string), string studyUri = default(string))
            : base(generatorConfig, name, platformConfig, policyConfig, primaryMetricConfig, description, maxConcurrentJobs, maxDurationMinutes, maxTotalJobs, studyId)
        {
            AllJobsGenerated = allJobsGenerated;
            CancellationRequested = cancellationRequested;
            Created = created;
            CreatedByUserId = createdByUserId;
            ExperimentId = experimentId;
            ExperimentUri = experimentUri;
            Modified = modified;
            Status = status;
            StudyUri = studyUri;
            HyperdriveRunId = hyperdriveRunId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets indicates if all runs have been generated.
        /// </summary>
        [JsonProperty(PropertyName = "all_jobs_generated")]
        public bool AllJobsGenerated { get; set; }

        /// <summary>
        /// Gets or sets indicates if cancellation has been requested for this
        /// Hyperdrive run.
        /// </summary>
        [JsonProperty(PropertyName = "cancellation_requested")]
        public bool CancellationRequested { get; set; }

        /// <summary>
        /// Gets or sets hyperdrive run creation time.
        /// </summary>
        [JsonProperty(PropertyName = "created")]
        public System.DateTime Created { get; set; }

        /// <summary>
        /// Gets or sets id of the user who created the Hyperdrive run.
        /// </summary>
        [JsonProperty(PropertyName = "created_by_user_id")]
        public int CreatedByUserId { get; set; }

        /// <summary>
        /// Gets or sets hyperdrive run id.
        /// </summary>
        [JsonProperty(PropertyName = "experiment_id")]
        public string ExperimentId { get; set; }

        /// <summary>
        /// Gets or sets hyperdrive run Uri.
        /// </summary>
        [JsonProperty(PropertyName = "experiment_uri")]
        public string ExperimentUri { get; set; }

        /// <summary>
        /// Gets or sets hyperdrive run modification time.
        /// </summary>
        [JsonProperty(PropertyName = "modified")]
        public System.DateTime Modified { get; set; }

        /// <summary>
        /// Gets or sets hyperdrive run status.
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets study Uri of the Hyperdrive run.
        /// </summary>
        [JsonProperty(PropertyName = "study_uri")]
        public string StudyUri { get; set; }

        /// <summary>
        /// Gets or sets hyperdrive run id.
        /// </summary>
        [JsonProperty(PropertyName = "hyperdrive_run_id")]
        public string HyperdriveRunId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (ExperimentId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ExperimentId");
            }
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
            if (HyperdriveRunId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "HyperdriveRunId");
            }
        }
    }
}
