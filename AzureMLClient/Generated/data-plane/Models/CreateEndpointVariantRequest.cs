// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.MachineLearning.Services.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The Variant properties.
    /// </summary>
    [Newtonsoft.Json.JsonObject("CreateEndpointVariantRequest")]
    public partial class CreateEndpointVariantRequest : CreateServiceRequest
    {
        /// <summary>
        /// Initializes a new instance of the CreateEndpointVariantRequest
        /// class.
        /// </summary>
        public CreateEndpointVariantRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CreateEndpointVariantRequest
        /// class.
        /// </summary>
        /// <param name="name">The service name.</param>
        /// <param name="description">The description of the service.</param>
        /// <param name="kvTags">The service tag dictionary. Tags are
        /// mutable.</param>
        /// <param name="properties">The service properties dictionary.
        /// Properties are immutable.</param>
        /// <param name="keys">The authentication keys.</param>
        /// <param name="deploymentType">The deployment type for the service.
        /// Possible values include: 'GRPCRealtimeEndpoint',
        /// 'HttpRealtimeEndpoint', 'Batch'</param>
        /// <param name="imageId">The Image Id.</param>
        /// <param name="environmentImageRequest">The Environment, models and
        /// assets needed for inferencing.</param>
        /// <param name="location">The location of the service.</param>
        /// <param name="isDefault">Is this the default variant.</param>
        /// <param name="trafficPercentile">The amount of traffic variant
        /// receives.</param>
        /// <param name="type">The type of the variant. Possible values
        /// include: 'Control', 'Treatment'</param>
        public CreateEndpointVariantRequest(string name, string description = default(string), IDictionary<string, string> kvTags = default(IDictionary<string, string>), IDictionary<string, string> properties = default(IDictionary<string, string>), AuthKeys keys = default(AuthKeys), DeploymentType? deploymentType = default(DeploymentType?), string imageId = default(string), EnvironmentImageRequest environmentImageRequest = default(EnvironmentImageRequest), string location = default(string), bool? isDefault = default(bool?), double? trafficPercentile = default(double?), VariantType? type = default(VariantType?))
            : base(name, description, kvTags, properties, keys, deploymentType, imageId, environmentImageRequest, location)
        {
            IsDefault = isDefault;
            TrafficPercentile = trafficPercentile;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets is this the default variant.
        /// </summary>
        [JsonProperty(PropertyName = "isDefault")]
        public bool? IsDefault { get; set; }

        /// <summary>
        /// Gets or sets the amount of traffic variant receives.
        /// </summary>
        [JsonProperty(PropertyName = "trafficPercentile")]
        public double? TrafficPercentile { get; set; }

        /// <summary>
        /// Gets or sets the type of the variant. Possible values include:
        /// 'Control', 'Treatment'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public VariantType? Type { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
