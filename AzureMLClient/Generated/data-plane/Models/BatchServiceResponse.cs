// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.MachineLearning.Services.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    [Newtonsoft.Json.JsonObject("AMLCOMPUTE")]
    public partial class BatchServiceResponse : ServiceResponseBase
    {
        /// <summary>
        /// Initializes a new instance of the BatchServiceResponse class.
        /// </summary>
        public BatchServiceResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BatchServiceResponse class.
        /// </summary>
        /// <param name="id">The service Id.</param>
        /// <param name="name">The service name.</param>
        /// <param name="description">The service description.</param>
        /// <param name="kvTags">The service tag dictionary. Tags are
        /// mutable.</param>
        /// <param name="properties">The service property dictionary.
        /// Properties are immutable.</param>
        /// <param name="operationId">The ID of the latest asynchronous
        /// operation for this service.</param>
        /// <param name="state">The current state of the service. Possible
        /// values include: 'Transitioning', 'Healthy', 'Unhealthy',
        /// 'Failed'</param>
        /// <param name="createdTime">The time the service was created.</param>
        /// <param name="updatedTime">The time the service was updated.</param>
        /// <param name="error">The error details.</param>
        /// <param name="deploymentType">The deployment type for the service.
        /// Possible values include: 'GRPCRealtimeEndpoint',
        /// 'HttpRealtimeEndpoint', 'Batch'</param>
        public BatchServiceResponse(string id = default(string), string name = default(string), string description = default(string), IDictionary<string, string> kvTags = default(IDictionary<string, string>), IDictionary<string, string> properties = default(IDictionary<string, string>), string operationId = default(string), WebServiceState? state = default(WebServiceState?), System.DateTime? createdTime = default(System.DateTime?), System.DateTime? updatedTime = default(System.DateTime?), ModelErrorResponse error = default(ModelErrorResponse), DeploymentType? deploymentType = default(DeploymentType?), IList<string> modelIds = default(IList<string>), string computeName = default(string), string environmentName = default(string), string environmentVersion = default(string), string scoringUri = default(string), bool? appInsightsEnabled = default(bool?), ModelDataCollection modelDataCollection = default(ModelDataCollection), string entryScript = default(string), string inputFormat = default(string), string outputAction = default(string), int? miniBatchSize = default(int?), double? errorThreshold = default(double?), int? nodeCount = default(int?), int? processCountPerNode = default(int?))
            : base(id, name, description, kvTags, properties, operationId, state, createdTime, updatedTime, error, deploymentType)
        {
            ModelIds = modelIds;
            ComputeName = computeName;
            EnvironmentName = environmentName;
            EnvironmentVersion = environmentVersion;
            ScoringUri = scoringUri;
            AppInsightsEnabled = appInsightsEnabled;
            ModelDataCollection = modelDataCollection;
            EntryScript = entryScript;
            InputFormat = inputFormat;
            OutputAction = outputAction;
            MiniBatchSize = miniBatchSize;
            ErrorThreshold = errorThreshold;
            NodeCount = nodeCount;
            ProcessCountPerNode = processCountPerNode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "modelIds")]
        public IList<string> ModelIds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "computeName")]
        public string ComputeName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "environmentName")]
        public string EnvironmentName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "environmentVersion")]
        public string EnvironmentVersion { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "scoringUri")]
        public string ScoringUri { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "appInsightsEnabled")]
        public bool? AppInsightsEnabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "modelDataCollection")]
        public ModelDataCollection ModelDataCollection { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "entryScript")]
        public string EntryScript { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "inputFormat")]
        public string InputFormat { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "outputAction")]
        public string OutputAction { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "miniBatchSize")]
        public int? MiniBatchSize { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "errorThreshold")]
        public double? ErrorThreshold { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "nodeCount")]
        public int? NodeCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "processCountPerNode")]
        public int? ProcessCountPerNode { get; set; }

    }
}
