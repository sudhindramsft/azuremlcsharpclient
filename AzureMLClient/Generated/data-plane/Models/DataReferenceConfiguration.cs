// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.MachineLearning.Services.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A class for managing DataReferenceConfiguration.
    /// </summary>
    public partial class DataReferenceConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the DataReferenceConfiguration class.
        /// </summary>
        public DataReferenceConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DataReferenceConfiguration class.
        /// </summary>
        /// <param name="dataStoreName">The name of the data store.</param>
        /// <param name="mode">Operation on the datastore, mount, download,
        /// upload. Possible values include: 'Mount', 'Download',
        /// 'Upload'</param>
        /// <param name="pathOnDataStore">Relative path on the
        /// datastore.</param>
        /// <param name="pathOnCompute">The path on the compute target.</param>
        /// <param name="overwrite">Whether to overwrite the data if
        /// existing.</param>
        public DataReferenceConfiguration(string dataStoreName = default(string), DataStoreMode? mode = default(DataStoreMode?), string pathOnDataStore = default(string), string pathOnCompute = default(string), bool? overwrite = default(bool?))
        {
            DataStoreName = dataStoreName;
            Mode = mode;
            PathOnDataStore = pathOnDataStore;
            PathOnCompute = pathOnCompute;
            Overwrite = overwrite;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the data store.
        /// </summary>
        [JsonProperty(PropertyName = "dataStoreName")]
        public string DataStoreName { get; set; }

        /// <summary>
        /// Gets or sets operation on the datastore, mount, download, upload.
        /// Possible values include: 'Mount', 'Download', 'Upload'
        /// </summary>
        [JsonProperty(PropertyName = "mode")]
        public DataStoreMode? Mode { get; set; }

        /// <summary>
        /// Gets or sets relative path on the datastore.
        /// </summary>
        [JsonProperty(PropertyName = "pathOnDataStore")]
        public string PathOnDataStore { get; set; }

        /// <summary>
        /// Gets or sets the path on the compute target.
        /// </summary>
        [JsonProperty(PropertyName = "pathOnCompute")]
        public string PathOnCompute { get; set; }

        /// <summary>
        /// Gets or sets whether to overwrite the data if existing.
        /// </summary>
        [JsonProperty(PropertyName = "overwrite")]
        public bool? Overwrite { get; set; }

    }
}
