// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.MachineLearning.Services.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for RuntimeType.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum RuntimeType
    {
        [EnumMember(Value = "SparkPython")]
        SparkPython,
        [EnumMember(Value = "Tlc37")]
        Tlc37,
        [EnumMember(Value = "Tlc38")]
        Tlc38,
        [EnumMember(Value = "Tlc310")]
        Tlc310,
        [EnumMember(Value = "Python")]
        Python,
        [EnumMember(Value = "PythonSlim")]
        PythonSlim,
        [EnumMember(Value = "PythonCustom")]
        PythonCustom
    }
    internal static class RuntimeTypeEnumExtension
    {
        internal static string ToSerializedValue(this RuntimeType? value)
        {
            return value == null ? null : ((RuntimeType)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this RuntimeType value)
        {
            switch( value )
            {
                case RuntimeType.SparkPython:
                    return "SparkPython";
                case RuntimeType.Tlc37:
                    return "Tlc37";
                case RuntimeType.Tlc38:
                    return "Tlc38";
                case RuntimeType.Tlc310:
                    return "Tlc310";
                case RuntimeType.Python:
                    return "Python";
                case RuntimeType.PythonSlim:
                    return "PythonSlim";
                case RuntimeType.PythonCustom:
                    return "PythonCustom";
            }
            return null;
        }

        internal static RuntimeType? ParseRuntimeType(this string value)
        {
            switch( value )
            {
                case "SparkPython":
                    return RuntimeType.SparkPython;
                case "Tlc37":
                    return RuntimeType.Tlc37;
                case "Tlc38":
                    return RuntimeType.Tlc38;
                case "Tlc310":
                    return RuntimeType.Tlc310;
                case "Python":
                    return RuntimeType.Python;
                case "PythonSlim":
                    return RuntimeType.PythonSlim;
                case "PythonCustom":
                    return RuntimeType.PythonCustom;
            }
            return null;
        }
    }
}
