// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.MachineLearning.Services.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class CreateRun
    {
        /// <summary>
        /// Initializes a new instance of the CreateRun class.
        /// </summary>
        public CreateRun()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CreateRun class.
        /// </summary>
        /// <param name="runId">The identifier for the run. Run IDs must be
        /// less than 256 characters and contain only alphanumeric characters
        /// with dashes and underscores.</param>
        /// <param name="parentRunId">The parent of the run if the run is
        /// hierarchical; otherwise, Null.</param>
        /// <param name="status">The status of the run. The Status string value
        /// maps to the RunStatus Enum.</param>
        /// <param name="startTimeUtc">The start time of the run in
        /// UTC.</param>
        /// <param name="endTimeUtc">The end time of the run in UTC.</param>
        public CreateRun(string runId = default(string), string parentRunId = default(string), string status = default(string), System.DateTime? startTimeUtc = default(System.DateTime?), System.DateTime? endTimeUtc = default(System.DateTime?), bool? heartbeatEnabled = default(bool?), RunOptions options = default(RunOptions), string name = default(string), string dataContainerId = default(string), string description = default(string), bool? hidden = default(bool?), string runType = default(string), IDictionary<string, string> properties = default(IDictionary<string, string>), string scriptName = default(string), string target = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), object runDefinition = default(object), CreatedFrom createdFrom = default(CreatedFrom), string cancelUri = default(string), string diagnosticsUri = default(string))
        {
            RunId = runId;
            ParentRunId = parentRunId;
            Status = status;
            StartTimeUtc = startTimeUtc;
            EndTimeUtc = endTimeUtc;
            HeartbeatEnabled = heartbeatEnabled;
            Options = options;
            Name = name;
            DataContainerId = dataContainerId;
            Description = description;
            Hidden = hidden;
            RunType = runType;
            Properties = properties;
            ScriptName = scriptName;
            Target = target;
            Tags = tags;
            RunDefinition = runDefinition;
            CreatedFrom = createdFrom;
            CancelUri = cancelUri;
            DiagnosticsUri = diagnosticsUri;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the identifier for the run. Run IDs must be less than
        /// 256 characters and contain only alphanumeric characters with dashes
        /// and underscores.
        /// </summary>
        [JsonProperty(PropertyName = "runId")]
        public string RunId { get; set; }

        /// <summary>
        /// Gets or sets the parent of the run if the run is hierarchical;
        /// otherwise, Null.
        /// </summary>
        [JsonProperty(PropertyName = "parentRunId")]
        public string ParentRunId { get; set; }

        /// <summary>
        /// Gets or sets the status of the run. The Status string value maps to
        /// the RunStatus Enum.
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the start time of the run in UTC.
        /// </summary>
        [JsonProperty(PropertyName = "startTimeUtc")]
        public System.DateTime? StartTimeUtc { get; set; }

        /// <summary>
        /// Gets or sets the end time of the run in UTC.
        /// </summary>
        [JsonProperty(PropertyName = "endTimeUtc")]
        public System.DateTime? EndTimeUtc { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "heartbeatEnabled")]
        public bool? HeartbeatEnabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "options")]
        public RunOptions Options { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dataContainerId")]
        public string DataContainerId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hidden")]
        public bool? Hidden { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "runType")]
        public string RunType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IDictionary<string, string> Properties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "scriptName")]
        public string ScriptName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "target")]
        public string Target { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "runDefinition")]
        public object RunDefinition { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdFrom")]
        public CreatedFrom CreatedFrom { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cancelUri")]
        public string CancelUri { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "diagnosticsUri")]
        public string DiagnosticsUri { get; set; }

    }
}
