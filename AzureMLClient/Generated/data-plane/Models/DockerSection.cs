// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.MachineLearning.Services.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class DockerSection
    {
        /// <summary>
        /// Initializes a new instance of the DockerSection class.
        /// </summary>
        public DockerSection()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DockerSection class.
        /// </summary>
        /// <param name="baseImage">Base image used for Docker-based runs.
        /// Mutually exclusive with BaseDockerfile.</param>
        /// <param name="baseDockerfile">Base Dockerfile used for Docker-based
        /// runs. Mutually exclusive with BaseImage.</param>
        /// <param name="enabled">Set true to perform this run inside a Docker
        /// container.</param>
        /// <param name="sharedVolumes">Set false to disable AzureML's usage of
        /// the Docker shared volumes feature to work around bugs in certain
        /// versions of Docker for Windows.</param>
        /// <param name="arguments">Extra arguments to the Docker run
        /// command.</param>
        /// <param name="baseImageRegistry">Image registry that contains the
        /// base image.</param>
        public DockerSection(string baseImage = default(string), string baseDockerfile = default(string), bool? enabled = default(bool?), bool? sharedVolumes = default(bool?), IList<string> arguments = default(IList<string>), ContainerRegistry baseImageRegistry = default(ContainerRegistry))
        {
            BaseImage = baseImage;
            BaseDockerfile = baseDockerfile;
            Enabled = enabled;
            SharedVolumes = sharedVolumes;
            Arguments = arguments;
            BaseImageRegistry = baseImageRegistry;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets base image used for Docker-based runs. Mutually
        /// exclusive with BaseDockerfile.
        /// </summary>
        [JsonProperty(PropertyName = "baseImage")]
        public string BaseImage { get; set; }

        /// <summary>
        /// Gets or sets base Dockerfile used for Docker-based runs. Mutually
        /// exclusive with BaseImage.
        /// </summary>
        [JsonProperty(PropertyName = "baseDockerfile")]
        public string BaseDockerfile { get; set; }

        /// <summary>
        /// Gets or sets set true to perform this run inside a Docker
        /// container.
        /// </summary>
        [JsonProperty(PropertyName = "enabled")]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets or sets set false to disable AzureML's usage of the Docker
        /// shared volumes feature to work around bugs in certain versions of
        /// Docker for Windows.
        /// </summary>
        [JsonProperty(PropertyName = "sharedVolumes")]
        public bool? SharedVolumes { get; set; }

        /// <summary>
        /// Gets or sets extra arguments to the Docker run command.
        /// </summary>
        [JsonProperty(PropertyName = "arguments")]
        public IList<string> Arguments { get; set; }

        /// <summary>
        /// Gets or sets image registry that contains the base image.
        /// </summary>
        [JsonProperty(PropertyName = "baseImageRegistry")]
        public ContainerRegistry BaseImageRegistry { get; set; }

    }
}
