// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.MachineLearning.Services.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The base class for creating a service.
    /// </summary>
    [Newtonsoft.Json.JsonObject("CreateServiceRequest")]
    public partial class CreateServiceRequest
    {
        /// <summary>
        /// Initializes a new instance of the CreateServiceRequest class.
        /// </summary>
        public CreateServiceRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CreateServiceRequest class.
        /// </summary>
        /// <param name="name">The service name.</param>
        /// <param name="description">The description of the service.</param>
        /// <param name="kvTags">The service tag dictionary. Tags are
        /// mutable.</param>
        /// <param name="properties">The service properties dictionary.
        /// Properties are immutable.</param>
        /// <param name="keys">The authentication keys.</param>
        /// <param name="deploymentType">The deployment type for the service.
        /// Possible values include: 'GRPCRealtimeEndpoint',
        /// 'HttpRealtimeEndpoint', 'Batch'</param>
        /// <param name="imageId">The Image Id.</param>
        /// <param name="environmentImageRequest">The Environment, models and
        /// assets needed for inferencing.</param>
        /// <param name="location">The location of the service.</param>
        public CreateServiceRequest(string name, string description = default(string), IDictionary<string, string> kvTags = default(IDictionary<string, string>), IDictionary<string, string> properties = default(IDictionary<string, string>), AuthKeys keys = default(AuthKeys), DeploymentType? deploymentType = default(DeploymentType?), string imageId = default(string), EnvironmentImageRequest environmentImageRequest = default(EnvironmentImageRequest), string location = default(string))
        {
            Name = name;
            Description = description;
            KvTags = kvTags;
            Properties = properties;
            Keys = keys;
            DeploymentType = deploymentType;
            ImageId = imageId;
            EnvironmentImageRequest = environmentImageRequest;
            Location = location;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the service name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the description of the service.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the service tag dictionary. Tags are mutable.
        /// </summary>
        [JsonProperty(PropertyName = "kvTags")]
        public IDictionary<string, string> KvTags { get; set; }

        /// <summary>
        /// Gets or sets the service properties dictionary. Properties are
        /// immutable.
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IDictionary<string, string> Properties { get; set; }

        /// <summary>
        /// Gets or sets the authentication keys.
        /// </summary>
        [JsonProperty(PropertyName = "keys")]
        public AuthKeys Keys { get; set; }

        /// <summary>
        /// Gets or sets the deployment type for the service. Possible values
        /// include: 'GRPCRealtimeEndpoint', 'HttpRealtimeEndpoint', 'Batch'
        /// </summary>
        [JsonProperty(PropertyName = "deploymentType")]
        public DeploymentType? DeploymentType { get; set; }

        /// <summary>
        /// Gets or sets the Image Id.
        /// </summary>
        [JsonProperty(PropertyName = "imageId")]
        public string ImageId { get; set; }

        /// <summary>
        /// Gets or sets the Environment, models and assets needed for
        /// inferencing.
        /// </summary>
        [JsonProperty(PropertyName = "environmentImageRequest")]
        public EnvironmentImageRequest EnvironmentImageRequest { get; set; }

        /// <summary>
        /// Gets or sets the location of the service.
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
