// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.MachineLearning.Services.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    [Newtonsoft.Json.JsonObject("ACI")]
    public partial class ACIServiceCreateRequest : CreateServiceRequest
    {
        /// <summary>
        /// Initializes a new instance of the ACIServiceCreateRequest class.
        /// </summary>
        public ACIServiceCreateRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ACIServiceCreateRequest class.
        /// </summary>
        /// <param name="name">The service name.</param>
        /// <param name="description">The description of the service.</param>
        /// <param name="kvTags">The service tag dictionary. Tags are
        /// mutable.</param>
        /// <param name="properties">The service properties dictionary.
        /// Properties are immutable.</param>
        /// <param name="keys">The authentication keys.</param>
        /// <param name="deploymentType">The deployment type for the service.
        /// Possible values include: 'GRPCRealtimeEndpoint',
        /// 'HttpRealtimeEndpoint', 'Batch'</param>
        /// <param name="imageId">The Image Id.</param>
        /// <param name="environmentImageRequest">The Environment, models and
        /// assets needed for inferencing.</param>
        /// <param name="location">The location of the service.</param>
        /// <param name="containerResourceRequirements">The container resource
        /// requirements.</param>
        /// <param name="authEnabled">Whether or not authentication is enabled
        /// on the service.</param>
        /// <param name="sslEnabled">Whether or not SSL is enabled.</param>
        /// <param name="appInsightsEnabled">Whether or not Application
        /// Insights is enabled.</param>
        /// <param name="dataCollection">Details of the data collection options
        /// specified.</param>
        /// <param name="sslCertificate">The SSL certificate to use if SSL is
        /// enabled.</param>
        /// <param name="sslKey">The SSL key for the certificate.</param>
        /// <param name="cname">The CName for the service.</param>
        /// <param name="dnsNameLabel">The Dns label for the service.</param>
        public ACIServiceCreateRequest(string name, string description = default(string), IDictionary<string, string> kvTags = default(IDictionary<string, string>), IDictionary<string, string> properties = default(IDictionary<string, string>), AuthKeys keys = default(AuthKeys), DeploymentType? deploymentType = default(DeploymentType?), string imageId = default(string), EnvironmentImageRequest environmentImageRequest = default(EnvironmentImageRequest), string location = default(string), ContainerResourceRequirements containerResourceRequirements = default(ContainerResourceRequirements), bool? authEnabled = default(bool?), bool? sslEnabled = default(bool?), bool? appInsightsEnabled = default(bool?), ModelDataCollection dataCollection = default(ModelDataCollection), string sslCertificate = default(string), string sslKey = default(string), string cname = default(string), string dnsNameLabel = default(string))
            : base(name, description, kvTags, properties, keys, deploymentType, imageId, environmentImageRequest, location)
        {
            ContainerResourceRequirements = containerResourceRequirements;
            AuthEnabled = authEnabled;
            SslEnabled = sslEnabled;
            AppInsightsEnabled = appInsightsEnabled;
            DataCollection = dataCollection;
            SslCertificate = sslCertificate;
            SslKey = sslKey;
            Cname = cname;
            DnsNameLabel = dnsNameLabel;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the container resource requirements.
        /// </summary>
        [JsonProperty(PropertyName = "containerResourceRequirements")]
        public ContainerResourceRequirements ContainerResourceRequirements { get; set; }

        /// <summary>
        /// Gets or sets whether or not authentication is enabled on the
        /// service.
        /// </summary>
        [JsonProperty(PropertyName = "authEnabled")]
        public bool? AuthEnabled { get; set; }

        /// <summary>
        /// Gets or sets whether or not SSL is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "sslEnabled")]
        public bool? SslEnabled { get; set; }

        /// <summary>
        /// Gets or sets whether or not Application Insights is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "appInsightsEnabled")]
        public bool? AppInsightsEnabled { get; set; }

        /// <summary>
        /// Gets or sets details of the data collection options specified.
        /// </summary>
        [JsonProperty(PropertyName = "dataCollection")]
        public ModelDataCollection DataCollection { get; set; }

        /// <summary>
        /// Gets or sets the SSL certificate to use if SSL is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "sslCertificate")]
        public string SslCertificate { get; set; }

        /// <summary>
        /// Gets or sets the SSL key for the certificate.
        /// </summary>
        [JsonProperty(PropertyName = "sslKey")]
        public string SslKey { get; set; }

        /// <summary>
        /// Gets or sets the CName for the service.
        /// </summary>
        [JsonProperty(PropertyName = "cname")]
        public string Cname { get; set; }

        /// <summary>
        /// Gets or sets the Dns label for the service.
        /// </summary>
        [JsonProperty(PropertyName = "dnsNameLabel")]
        public string DnsNameLabel { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
