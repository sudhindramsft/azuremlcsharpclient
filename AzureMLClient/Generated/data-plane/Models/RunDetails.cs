// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.MachineLearning.Services.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The details of the run.
    /// </summary>
    public partial class RunDetails
    {
        /// <summary>
        /// Initializes a new instance of the RunDetails class.
        /// </summary>
        public RunDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RunDetails class.
        /// </summary>
        /// <param name="runId">The identifier for the run.</param>
        /// <param name="target">The name of the compute target where the run
        /// is executed.</param>
        /// <param name="status">The status of the run. The Status string value
        /// maps to the RunStatus Enum.</param>
        /// <param name="parentRunId">The parent of the run if the run is
        /// hierarchical.</param>
        /// <param name="startTimeUtc">The start time of the run in
        /// UTC.</param>
        /// <param name="endTimeUtc">The end time of the run in UTC.</param>
        /// <param name="error">If an error occurred during the run, this will
        /// be populated.</param>
        /// <param name="warnings">A list of warnings that occurred during the
        /// run.</param>
        /// <param name="tags">The tag dictionary for the run. Tags are
        /// mutable.</param>
        /// <param name="properties">The properties dictionary for the run.
        /// Properties are immutable.</param>
        /// <param name="runDefinition">The run definition
        /// specification.</param>
        public RunDetails(string runId = default(string), string target = default(string), string status = default(string), string parentRunId = default(string), System.DateTime? startTimeUtc = default(System.DateTime?), System.DateTime? endTimeUtc = default(System.DateTime?), ErrorResponse error = default(ErrorResponse), IList<RunDetailsWarning> warnings = default(IList<RunDetailsWarning>), IDictionary<string, string> tags = default(IDictionary<string, string>), IDictionary<string, string> properties = default(IDictionary<string, string>), object runDefinition = default(object), IDictionary<string, string> logFiles = default(IDictionary<string, string>), int? revision = default(int?))
        {
            RunId = runId;
            Target = target;
            Status = status;
            ParentRunId = parentRunId;
            StartTimeUtc = startTimeUtc;
            EndTimeUtc = endTimeUtc;
            Error = error;
            Warnings = warnings;
            Tags = tags;
            Properties = properties;
            RunDefinition = runDefinition;
            LogFiles = logFiles;
            Revision = revision;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the identifier for the run.
        /// </summary>
        [JsonProperty(PropertyName = "runId")]
        public string RunId { get; set; }

        /// <summary>
        /// Gets or sets the name of the compute target where the run is
        /// executed.
        /// </summary>
        [JsonProperty(PropertyName = "target")]
        public string Target { get; set; }

        /// <summary>
        /// Gets or sets the status of the run. The Status string value maps to
        /// the RunStatus Enum.
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the parent of the run if the run is hierarchical.
        /// </summary>
        [JsonProperty(PropertyName = "parentRunId")]
        public string ParentRunId { get; set; }

        /// <summary>
        /// Gets or sets the start time of the run in UTC.
        /// </summary>
        [JsonProperty(PropertyName = "startTimeUtc")]
        public System.DateTime? StartTimeUtc { get; set; }

        /// <summary>
        /// Gets or sets the end time of the run in UTC.
        /// </summary>
        [JsonProperty(PropertyName = "endTimeUtc")]
        public System.DateTime? EndTimeUtc { get; set; }

        /// <summary>
        /// Gets or sets if an error occurred during the run, this will be
        /// populated.
        /// </summary>
        [JsonProperty(PropertyName = "error")]
        public ErrorResponse Error { get; set; }

        /// <summary>
        /// Gets or sets a list of warnings that occurred during the run.
        /// </summary>
        [JsonProperty(PropertyName = "warnings")]
        public IList<RunDetailsWarning> Warnings { get; set; }

        /// <summary>
        /// Gets or sets the tag dictionary for the run. Tags are mutable.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Gets or sets the properties dictionary for the run. Properties are
        /// immutable.
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IDictionary<string, string> Properties { get; set; }

        /// <summary>
        /// Gets or sets the run definition specification.
        /// </summary>
        [JsonProperty(PropertyName = "runDefinition")]
        public object RunDefinition { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "logFiles")]
        public IDictionary<string, string> LogFiles { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "revision")]
        public int? Revision { get; set; }

    }
}
