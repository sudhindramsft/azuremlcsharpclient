// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.MachineLearning.Services.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for Framework.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum Framework
    {
        [EnumMember(Value = "Python")]
        Python,
        [EnumMember(Value = "PySpark")]
        PySpark,
        [EnumMember(Value = "Cntk")]
        Cntk,
        [EnumMember(Value = "TensorFlow")]
        TensorFlow,
        [EnumMember(Value = "PyTorch")]
        PyTorch
    }
    internal static class FrameworkEnumExtension
    {
        internal static string ToSerializedValue(this Framework? value)
        {
            return value == null ? null : ((Framework)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this Framework value)
        {
            switch( value )
            {
                case Framework.Python:
                    return "Python";
                case Framework.PySpark:
                    return "PySpark";
                case Framework.Cntk:
                    return "Cntk";
                case Framework.TensorFlow:
                    return "TensorFlow";
                case Framework.PyTorch:
                    return "PyTorch";
            }
            return null;
        }

        internal static Framework? ParseFramework(this string value)
        {
            switch( value )
            {
                case "Python":
                    return Framework.Python;
                case "PySpark":
                    return Framework.PySpark;
                case "Cntk":
                    return Framework.Cntk;
                case "TensorFlow":
                    return Framework.TensorFlow;
                case "PyTorch":
                    return Framework.PyTorch;
            }
            return null;
        }
    }
}
