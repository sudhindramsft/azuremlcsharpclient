// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.MachineLearning.Services.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The response for an AKS service.
    /// </summary>
    [Newtonsoft.Json.JsonObject("AKS")]
    public partial class AKSServiceResponse : AKSVariantResponse
    {
        /// <summary>
        /// Initializes a new instance of the AKSServiceResponse class.
        /// </summary>
        public AKSServiceResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AKSServiceResponse class.
        /// </summary>
        /// <param name="id">The service Id.</param>
        /// <param name="name">The service name.</param>
        /// <param name="description">The service description.</param>
        /// <param name="kvTags">The service tag dictionary. Tags are
        /// mutable.</param>
        /// <param name="properties">The service property dictionary.
        /// Properties are immutable.</param>
        /// <param name="operationId">The ID of the latest asynchronous
        /// operation for this service.</param>
        /// <param name="state">The current state of the service. Possible
        /// values include: 'Transitioning', 'Healthy', 'Unhealthy',
        /// 'Failed'</param>
        /// <param name="createdTime">The time the service was created.</param>
        /// <param name="updatedTime">The time the service was updated.</param>
        /// <param name="error">The error details.</param>
        /// <param name="deploymentType">The deployment type for the service.
        /// Possible values include: 'GRPCRealtimeEndpoint',
        /// 'HttpRealtimeEndpoint', 'Batch'</param>
        /// <param name="isDefault">Is this the default variant.</param>
        /// <param name="trafficPercentile">The amount of traffic variant
        /// receives.</param>
        /// <param name="type">The type of the variant. Possible values
        /// include: 'Control', 'Treatment'</param>
        /// <param name="imageDetails">The Docker Image details.</param>
        /// <param name="imageId">The Id of the Image.</param>
        /// <param name="modelsProperty">The list of models.</param>
        /// <param name="containerResourceRequirements">The container resource
        /// requirements.</param>
        /// <param name="maxConcurrentRequestsPerContainer">The maximum number
        /// of concurrent requests per container.</param>
        /// <param name="maxQueueWaitMs">Maximum time a request will wait in
        /// the queue (in milliseconds). After this time, the service will
        /// return 503 (Service Unavailable)</param>
        /// <param name="computeName">The name of the compute resource.</param>
        /// <param name="namespaceProperty">The Kubernetes namespace of the
        /// deployment.</param>
        /// <param name="numReplicas">The number of replicas on the
        /// cluster.</param>
        /// <param name="dataCollection">Details of the data collection options
        /// specified.</param>
        /// <param name="appInsightsEnabled">Whether or not Application
        /// Insights is enabled.</param>
        /// <param name="autoScaler">The auto scaler properties.</param>
        /// <param name="scoringUri">The Uri for sending scoring
        /// requests.</param>
        /// <param name="deploymentStatus">The deployment status.</param>
        /// <param name="scoringTimeoutMs">The scoring timeout in
        /// milliseconds.</param>
        /// <param name="livenessProbeRequirements">The liveness probe
        /// requirements.</param>
        /// <param name="authEnabled">Whether or not authentication is
        /// enabled.</param>
        /// <param name="aadAuthEnabled">Whether or not AAD authentication is
        /// enabled.</param>
        /// <param name="swaggerUri">The Uri for sending swagger
        /// requests.</param>
        /// <param name="modelConfigMap">Details on the models and
        /// configurations.</param>
        /// <param name="environment">Details on the Environment.</param>
        public AKSServiceResponse(string id = default(string), string name = default(string), string description = default(string), IDictionary<string, string> kvTags = default(IDictionary<string, string>), IDictionary<string, string> properties = default(IDictionary<string, string>), string operationId = default(string), WebServiceState? state = default(WebServiceState?), System.DateTime? createdTime = default(System.DateTime?), System.DateTime? updatedTime = default(System.DateTime?), ModelErrorResponse error = default(ModelErrorResponse), DeploymentType? deploymentType = default(DeploymentType?), bool? isDefault = default(bool?), double? trafficPercentile = default(double?), VariantType? type = default(VariantType?), ImageResponseBase imageDetails = default(ImageResponseBase), string imageId = default(string), IList<Model> modelsProperty = default(IList<Model>), ContainerResourceRequirements containerResourceRequirements = default(ContainerResourceRequirements), int? maxConcurrentRequestsPerContainer = default(int?), int? maxQueueWaitMs = default(int?), string computeName = default(string), string namespaceProperty = default(string), int? numReplicas = default(int?), ModelDataCollection dataCollection = default(ModelDataCollection), bool? appInsightsEnabled = default(bool?), AutoScaler autoScaler = default(AutoScaler), string scoringUri = default(string), AKSReplicaStatus deploymentStatus = default(AKSReplicaStatus), int? scoringTimeoutMs = default(int?), LivenessProbeRequirements livenessProbeRequirements = default(LivenessProbeRequirements), bool? authEnabled = default(bool?), bool? aadAuthEnabled = default(bool?), string swaggerUri = default(string), IDictionary<string, object> modelConfigMap = default(IDictionary<string, object>), ModelEnvironmentDefinition environment = default(ModelEnvironmentDefinition))
            : base(id, name, description, kvTags, properties, operationId, state, createdTime, updatedTime, error, deploymentType, isDefault, trafficPercentile, type)
        {
            ImageDetails = imageDetails;
            ImageId = imageId;
            ModelsProperty = modelsProperty;
            ContainerResourceRequirements = containerResourceRequirements;
            MaxConcurrentRequestsPerContainer = maxConcurrentRequestsPerContainer;
            MaxQueueWaitMs = maxQueueWaitMs;
            ComputeName = computeName;
            NamespaceProperty = namespaceProperty;
            NumReplicas = numReplicas;
            DataCollection = dataCollection;
            AppInsightsEnabled = appInsightsEnabled;
            AutoScaler = autoScaler;
            ScoringUri = scoringUri;
            DeploymentStatus = deploymentStatus;
            ScoringTimeoutMs = scoringTimeoutMs;
            LivenessProbeRequirements = livenessProbeRequirements;
            AuthEnabled = authEnabled;
            AadAuthEnabled = aadAuthEnabled;
            SwaggerUri = swaggerUri;
            ModelConfigMap = modelConfigMap;
            Environment = environment;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Docker Image details.
        /// </summary>
        [JsonProperty(PropertyName = "imageDetails")]
        public ImageResponseBase ImageDetails { get; set; }

        /// <summary>
        /// Gets or sets the Id of the Image.
        /// </summary>
        [JsonProperty(PropertyName = "imageId")]
        public string ImageId { get; set; }

        /// <summary>
        /// Gets or sets the list of models.
        /// </summary>
        [JsonProperty(PropertyName = "models")]
        public IList<Model> ModelsProperty { get; set; }

        /// <summary>
        /// Gets or sets the container resource requirements.
        /// </summary>
        [JsonProperty(PropertyName = "containerResourceRequirements")]
        public ContainerResourceRequirements ContainerResourceRequirements { get; set; }

        /// <summary>
        /// Gets or sets the maximum number of concurrent requests per
        /// container.
        /// </summary>
        [JsonProperty(PropertyName = "maxConcurrentRequestsPerContainer")]
        public int? MaxConcurrentRequestsPerContainer { get; set; }

        /// <summary>
        /// Gets or sets maximum time a request will wait in the queue (in
        /// milliseconds). After this time, the service will return 503
        /// (Service Unavailable)
        /// </summary>
        [JsonProperty(PropertyName = "maxQueueWaitMs")]
        public int? MaxQueueWaitMs { get; set; }

        /// <summary>
        /// Gets or sets the name of the compute resource.
        /// </summary>
        [JsonProperty(PropertyName = "computeName")]
        public string ComputeName { get; set; }

        /// <summary>
        /// Gets or sets the Kubernetes namespace of the deployment.
        /// </summary>
        [JsonProperty(PropertyName = "namespace")]
        public string NamespaceProperty { get; set; }

        /// <summary>
        /// Gets or sets the number of replicas on the cluster.
        /// </summary>
        [JsonProperty(PropertyName = "numReplicas")]
        public int? NumReplicas { get; set; }

        /// <summary>
        /// Gets or sets details of the data collection options specified.
        /// </summary>
        [JsonProperty(PropertyName = "dataCollection")]
        public ModelDataCollection DataCollection { get; set; }

        /// <summary>
        /// Gets or sets whether or not Application Insights is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "appInsightsEnabled")]
        public bool? AppInsightsEnabled { get; set; }

        /// <summary>
        /// Gets or sets the auto scaler properties.
        /// </summary>
        [JsonProperty(PropertyName = "autoScaler")]
        public AutoScaler AutoScaler { get; set; }

        /// <summary>
        /// Gets or sets the Uri for sending scoring requests.
        /// </summary>
        [JsonProperty(PropertyName = "scoringUri")]
        public string ScoringUri { get; set; }

        /// <summary>
        /// Gets or sets the deployment status.
        /// </summary>
        [JsonProperty(PropertyName = "deploymentStatus")]
        public AKSReplicaStatus DeploymentStatus { get; set; }

        /// <summary>
        /// Gets or sets the scoring timeout in milliseconds.
        /// </summary>
        [JsonProperty(PropertyName = "scoringTimeoutMs")]
        public int? ScoringTimeoutMs { get; set; }

        /// <summary>
        /// Gets or sets the liveness probe requirements.
        /// </summary>
        [JsonProperty(PropertyName = "livenessProbeRequirements")]
        public LivenessProbeRequirements LivenessProbeRequirements { get; set; }

        /// <summary>
        /// Gets or sets whether or not authentication is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "authEnabled")]
        public bool? AuthEnabled { get; set; }

        /// <summary>
        /// Gets or sets whether or not AAD authentication is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "aadAuthEnabled")]
        public bool? AadAuthEnabled { get; set; }

        /// <summary>
        /// Gets or sets the Uri for sending swagger requests.
        /// </summary>
        [JsonProperty(PropertyName = "swaggerUri")]
        public string SwaggerUri { get; set; }

        /// <summary>
        /// Gets or sets details on the models and configurations.
        /// </summary>
        [JsonProperty(PropertyName = "modelConfigMap")]
        public IDictionary<string, object> ModelConfigMap { get; set; }

        /// <summary>
        /// Gets or sets details on the Environment.
        /// </summary>
        [JsonProperty(PropertyName = "environment")]
        public ModelEnvironmentDefinition Environment { get; set; }

    }
}
