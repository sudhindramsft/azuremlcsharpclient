// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.MachineLearning.Services
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ProfilesOperations.
    /// </summary>
    public static partial class ProfilesOperationsExtensions
    {
            /// <summary>
            /// Get a Profile.
            /// </summary>
            /// <remarks>
            /// Get the Profile for an Image.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='imageId'>
            /// The Image Id.
            /// </param>
            /// <param name='id'>
            /// The Profile Id.
            /// </param>
            public static ProfileResponse QueryById(this IProfilesOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, string imageId, string id)
            {
                return operations.QueryByIdAsync(subscriptionId, resourceGroup, workspace, imageId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a Profile.
            /// </summary>
            /// <remarks>
            /// Get the Profile for an Image.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='imageId'>
            /// The Image Id.
            /// </param>
            /// <param name='id'>
            /// The Profile Id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProfileResponse> QueryByIdAsync(this IProfilesOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, string imageId, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryByIdWithHttpMessagesAsync(subscriptionId, resourceGroup, workspace, imageId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of Image Profiles.
            /// </summary>
            /// <remarks>
            /// If no filter is passed, the query lists all Profiles for the Image. The
            /// returned list is paginated and the count of items in each page is an
            /// optional parameter.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='imageId'>
            /// The Image Id.
            /// </param>
            /// <param name='name'>
            /// The Profile name.
            /// </param>
            /// <param name='description'>
            /// The Profile description.
            /// </param>
            /// <param name='tags'>
            /// A set of tags with which to filter the returned models.
            /// It is a comma separated string of tags key or tags key=value
            /// Example: tagKey1,tagKey2,tagKey3=value3
            /// </param>
            /// <param name='properties'>
            /// A set of properties with which to filter the returned models.
            /// It is a comma separated string of properties key and/or properties
            /// key=value
            /// Example: propKey1,propKey2,propKey3=value3
            /// </param>
            /// <param name='count'>
            /// The number of items to retrieve in a page.
            /// </param>
            /// <param name='skipToken'>
            /// The continuation token to retrieve the next page.
            /// </param>
            /// <param name='orderBy'>
            /// The option to order the response. Possible values include: 'CreatedAtDesc',
            /// 'CreatedAtAsc', 'UpdatedAtDesc', 'UpdatedAtAsc'
            /// </param>
            public static IPage<ProfileResponse> ListQuery(this IProfilesOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, string imageId, string name = default(string), string description = default(string), string tags = default(string), string properties = default(string), int? count = default(int?), string skipToken = default(string), string orderBy = default(string))
            {
                return operations.ListQueryAsync(subscriptionId, resourceGroup, workspace, imageId, name, description, tags, properties, count, skipToken, orderBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of Image Profiles.
            /// </summary>
            /// <remarks>
            /// If no filter is passed, the query lists all Profiles for the Image. The
            /// returned list is paginated and the count of items in each page is an
            /// optional parameter.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='imageId'>
            /// The Image Id.
            /// </param>
            /// <param name='name'>
            /// The Profile name.
            /// </param>
            /// <param name='description'>
            /// The Profile description.
            /// </param>
            /// <param name='tags'>
            /// A set of tags with which to filter the returned models.
            /// It is a comma separated string of tags key or tags key=value
            /// Example: tagKey1,tagKey2,tagKey3=value3
            /// </param>
            /// <param name='properties'>
            /// A set of properties with which to filter the returned models.
            /// It is a comma separated string of properties key and/or properties
            /// key=value
            /// Example: propKey1,propKey2,propKey3=value3
            /// </param>
            /// <param name='count'>
            /// The number of items to retrieve in a page.
            /// </param>
            /// <param name='skipToken'>
            /// The continuation token to retrieve the next page.
            /// </param>
            /// <param name='orderBy'>
            /// The option to order the response. Possible values include: 'CreatedAtDesc',
            /// 'CreatedAtAsc', 'UpdatedAtDesc', 'UpdatedAtAsc'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProfileResponse>> ListQueryAsync(this IProfilesOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, string imageId, string name = default(string), string description = default(string), string tags = default(string), string properties = default(string), int? count = default(int?), string skipToken = default(string), string orderBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueryWithHttpMessagesAsync(subscriptionId, resourceGroup, workspace, imageId, name, description, tags, properties, count, skipToken, orderBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a Profile.
            /// </summary>
            /// <remarks>
            /// Create a Profile for an Image.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='imageId'>
            /// The Image Id.
            /// </param>
            /// <param name='inputRequest'>
            /// The payload that is used to create the Profile.
            /// </param>
            public static void Create(this IProfilesOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, string imageId, ProfileRequestBase inputRequest)
            {
                operations.CreateAsync(subscriptionId, resourceGroup, workspace, imageId, inputRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a Profile.
            /// </summary>
            /// <remarks>
            /// Create a Profile for an Image.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='imageId'>
            /// The Image Id.
            /// </param>
            /// <param name='inputRequest'>
            /// The payload that is used to create the Profile.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateAsync(this IProfilesOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, string imageId, ProfileRequestBase inputRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CreateWithHttpMessagesAsync(subscriptionId, resourceGroup, workspace, imageId, inputRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a list of Image Profiles.
            /// </summary>
            /// <remarks>
            /// If no filter is passed, the query lists all Profiles for the Image. The
            /// returned list is paginated and the count of items in each page is an
            /// optional parameter.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ProfileResponse> ListQueryNext(this IProfilesOperations operations, string nextPageLink)
            {
                return operations.ListQueryNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of Image Profiles.
            /// </summary>
            /// <remarks>
            /// If no filter is passed, the query lists all Profiles for the Image. The
            /// returned list is paginated and the count of items in each page is an
            /// optional parameter.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProfileResponse>> ListQueryNextAsync(this IProfilesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueryNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
