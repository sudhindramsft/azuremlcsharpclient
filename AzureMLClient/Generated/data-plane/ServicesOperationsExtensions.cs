// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.MachineLearning.Services
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ServicesOperations.
    /// </summary>
    public static partial class ServicesOperationsExtensions
    {
            /// <summary>
            /// Get a Service.
            /// </summary>
            /// <remarks>
            /// Get a Service by Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='id'>
            /// The Service Id.
            /// </param>
            /// <param name='expand'>
            /// Set to True to include Model details.
            /// </param>
            public static ServiceResponseBase QueryById(this IServicesOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, string id, bool? expand = false)
            {
                return operations.QueryByIdAsync(subscriptionId, resourceGroup, workspace, id, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a Service.
            /// </summary>
            /// <remarks>
            /// Get a Service by Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='id'>
            /// The Service Id.
            /// </param>
            /// <param name='expand'>
            /// Set to True to include Model details.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServiceResponseBase> QueryByIdAsync(this IServicesOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, string id, bool? expand = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryByIdWithHttpMessagesAsync(subscriptionId, resourceGroup, workspace, id, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a Service.
            /// </summary>
            /// <remarks>
            /// Delete a specific Service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='id'>
            /// The Service Id.
            /// </param>
            public static void Delete(this IServicesOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, string id)
            {
                operations.DeleteAsync(subscriptionId, resourceGroup, workspace, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a Service.
            /// </summary>
            /// <remarks>
            /// Delete a specific Service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='id'>
            /// The Service Id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IServicesOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(subscriptionId, resourceGroup, workspace, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Patch a Service.
            /// </summary>
            /// <remarks>
            /// Patch a specific Service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='id'>
            /// The Service Id.
            /// </param>
            /// <param name='patch'>
            /// The payload that is used to patch the Service.
            /// </param>
            public static void Patch(this IServicesOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, string id, IList<JsonPatchOperation> patch)
            {
                operations.PatchAsync(subscriptionId, resourceGroup, workspace, id, patch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patch a Service.
            /// </summary>
            /// <remarks>
            /// Patch a specific Service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='id'>
            /// The Service Id.
            /// </param>
            /// <param name='patch'>
            /// The payload that is used to patch the Service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PatchAsync(this IServicesOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, string id, IList<JsonPatchOperation> patch, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PatchWithHttpMessagesAsync(subscriptionId, resourceGroup, workspace, id, patch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Query the list of Services in a Workspace.
            /// </summary>
            /// <remarks>
            /// If no filter is passed, the query lists all Services in the Workspace. The
            /// returned list is paginated and the count of item in each page is an
            /// optional parameter.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='imageId'>
            /// The Image Id.
            /// </param>
            /// <param name='imageName'>
            /// The Image name.
            /// </param>
            /// <param name='modelId'>
            /// The Model Id.
            /// </param>
            /// <param name='modelName'>
            /// The Model name.
            /// </param>
            /// <param name='name'>
            /// The object name.
            /// </param>
            /// <param name='count'>
            /// The number of items to retrieve in a page.
            /// </param>
            /// <param name='computeType'>
            /// The compute environment type.
            /// </param>
            /// <param name='skipToken'>
            /// The continuation token to retrieve the next page.
            /// </param>
            /// <param name='tags'>
            /// A set of tags with which to filter the returned models.
            /// It is a comma separated string of tags key or tags key=value
            /// Example: tagKey1,tagKey2,tagKey3=value3
            /// </param>
            /// <param name='properties'>
            /// A set of properties with which to filter the returned models.
            /// It is a comma separated string of properties key and/or properties
            /// key=value
            /// Example: propKey1,propKey2,propKey3=value3
            /// </param>
            /// <param name='expand'>
            /// Set to True to include Model details.
            /// </param>
            /// <param name='orderby'>
            /// The option to order the response. Possible values include: 'CreatedAtDesc',
            /// 'CreatedAtAsc', 'UpdatedAtDesc', 'UpdatedAtAsc'
            /// </param>
            public static IPage<ServiceResponseBase> ListQuery(this IServicesOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, string imageId = default(string), string imageName = default(string), string modelId = default(string), string modelName = default(string), string name = default(string), int? count = default(int?), string computeType = default(string), string skipToken = default(string), string tags = default(string), string properties = default(string), bool? expand = false, string orderby = default(string))
            {
                return operations.ListQueryAsync(subscriptionId, resourceGroup, workspace, imageId, imageName, modelId, modelName, name, count, computeType, skipToken, tags, properties, expand, orderby).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query the list of Services in a Workspace.
            /// </summary>
            /// <remarks>
            /// If no filter is passed, the query lists all Services in the Workspace. The
            /// returned list is paginated and the count of item in each page is an
            /// optional parameter.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='imageId'>
            /// The Image Id.
            /// </param>
            /// <param name='imageName'>
            /// The Image name.
            /// </param>
            /// <param name='modelId'>
            /// The Model Id.
            /// </param>
            /// <param name='modelName'>
            /// The Model name.
            /// </param>
            /// <param name='name'>
            /// The object name.
            /// </param>
            /// <param name='count'>
            /// The number of items to retrieve in a page.
            /// </param>
            /// <param name='computeType'>
            /// The compute environment type.
            /// </param>
            /// <param name='skipToken'>
            /// The continuation token to retrieve the next page.
            /// </param>
            /// <param name='tags'>
            /// A set of tags with which to filter the returned models.
            /// It is a comma separated string of tags key or tags key=value
            /// Example: tagKey1,tagKey2,tagKey3=value3
            /// </param>
            /// <param name='properties'>
            /// A set of properties with which to filter the returned models.
            /// It is a comma separated string of properties key and/or properties
            /// key=value
            /// Example: propKey1,propKey2,propKey3=value3
            /// </param>
            /// <param name='expand'>
            /// Set to True to include Model details.
            /// </param>
            /// <param name='orderby'>
            /// The option to order the response. Possible values include: 'CreatedAtDesc',
            /// 'CreatedAtAsc', 'UpdatedAtDesc', 'UpdatedAtAsc'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ServiceResponseBase>> ListQueryAsync(this IServicesOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, string imageId = default(string), string imageName = default(string), string modelId = default(string), string modelName = default(string), string name = default(string), int? count = default(int?), string computeType = default(string), string skipToken = default(string), string tags = default(string), string properties = default(string), bool? expand = false, string orderby = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueryWithHttpMessagesAsync(subscriptionId, resourceGroup, workspace, imageId, imageName, modelId, modelName, name, count, computeType, skipToken, tags, properties, expand, orderby, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a Service.
            /// </summary>
            /// <remarks>
            /// Create a Service with the specified payload.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='request'>
            /// The payload that is used to create the Service.
            /// </param>
            public static void Create(this IServicesOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, CreateServiceRequest request)
            {
                operations.CreateAsync(subscriptionId, resourceGroup, workspace, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a Service.
            /// </summary>
            /// <remarks>
            /// Create a Service with the specified payload.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='request'>
            /// The payload that is used to create the Service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateAsync(this IServicesOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, CreateServiceRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CreateWithHttpMessagesAsync(subscriptionId, resourceGroup, workspace, request, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists Service keys.
            /// </summary>
            /// <remarks>
            /// Gets a list of Service keys.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='id'>
            /// The Service Id.
            /// </param>
            public static AuthKeys ListServiceKeys(this IServicesOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, string id)
            {
                return operations.ListServiceKeysAsync(subscriptionId, resourceGroup, workspace, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists Service keys.
            /// </summary>
            /// <remarks>
            /// Gets a list of Service keys.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='id'>
            /// The Service Id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AuthKeys> ListServiceKeysAsync(this IServicesOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListServiceKeysWithHttpMessagesAsync(subscriptionId, resourceGroup, workspace, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Regenerate Service Keys.
            /// </summary>
            /// <remarks>
            /// Regenerate and return the Service keys.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='id'>
            /// The Service Id.
            /// </param>
            /// <param name='request'>
            /// The payload that is used to regenerate keys.
            /// </param>
            public static AuthKeys RegenerateServiceKeys(this IServicesOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, string id, RegenerateServiceKeysRequest request)
            {
                return operations.RegenerateServiceKeysAsync(subscriptionId, resourceGroup, workspace, id, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Regenerate Service Keys.
            /// </summary>
            /// <remarks>
            /// Regenerate and return the Service keys.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='id'>
            /// The Service Id.
            /// </param>
            /// <param name='request'>
            /// The payload that is used to regenerate keys.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AuthKeys> RegenerateServiceKeysAsync(this IServicesOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, string id, RegenerateServiceKeysRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegenerateServiceKeysWithHttpMessagesAsync(subscriptionId, resourceGroup, workspace, id, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Generate Service Access Token.
            /// </summary>
            /// <remarks>
            /// Gets access token that can be used for calling service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='id'>
            /// The Service Id.
            /// </param>
            public static AuthToken GetServiceToken(this IServicesOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, string id)
            {
                return operations.GetServiceTokenAsync(subscriptionId, resourceGroup, workspace, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Generate Service Access Token.
            /// </summary>
            /// <remarks>
            /// Gets access token that can be used for calling service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='id'>
            /// The Service Id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AuthToken> GetServiceTokenAsync(this IServicesOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetServiceTokenWithHttpMessagesAsync(subscriptionId, resourceGroup, workspace, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query the list of Services in a Workspace.
            /// </summary>
            /// <remarks>
            /// If no filter is passed, the query lists all Services in the Workspace. The
            /// returned list is paginated and the count of item in each page is an
            /// optional parameter.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ServiceResponseBase> ListQueryNext(this IServicesOperations operations, string nextPageLink)
            {
                return operations.ListQueryNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query the list of Services in a Workspace.
            /// </summary>
            /// <remarks>
            /// If no filter is passed, the query lists all Services in the Workspace. The
            /// returned list is paginated and the count of item in each page is an
            /// optional parameter.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ServiceResponseBase>> ListQueryNextAsync(this IServicesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueryNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
