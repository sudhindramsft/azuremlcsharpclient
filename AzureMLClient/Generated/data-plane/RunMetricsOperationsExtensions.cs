// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.MachineLearning.Services
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RunMetricsOperations.
    /// </summary>
    public static partial class RunMetricsOperationsExtensions
    {
            /// <summary>
            /// Post Metric to a Run.
            /// </summary>
            /// <remarks>
            /// Post a Metric to a specific Run Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runId'>
            /// The identifier for a run.
            /// </param>
            /// <param name='metricDto'>
            /// Details of the metric which will be added to the Run Id.
            /// </param>
            public static void Post(this IRunMetricsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, Metric metricDto = default(Metric))
            {
                operations.PostAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, metricDto).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Post Metric to a Run.
            /// </summary>
            /// <remarks>
            /// Post a Metric to a specific Run Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runId'>
            /// The identifier for a run.
            /// </param>
            /// <param name='metricDto'>
            /// Details of the metric which will be added to the Run Id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostAsync(this IRunMetricsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, Metric metricDto = default(Metric), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, metricDto, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Post Metrics to a Run.
            /// </summary>
            /// <remarks>
            /// Post Metrics to a specific Run Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runId'>
            /// The identifier for a run.
            /// </param>
            /// <param name='batchMetricDto'>
            /// Details of the Metrics which will be added to the Run Id.
            /// </param>
            public static void BatchPost(this IRunMetricsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, BatchMetric batchMetricDto = default(BatchMetric))
            {
                operations.BatchPostAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, batchMetricDto).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Post Metrics to a Run.
            /// </summary>
            /// <remarks>
            /// Post Metrics to a specific Run Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runId'>
            /// The identifier for a run.
            /// </param>
            /// <param name='batchMetricDto'>
            /// Details of the Metrics which will be added to the Run Id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BatchPostAsync(this IRunMetricsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, BatchMetric batchMetricDto = default(BatchMetric), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BatchPostWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, batchMetricDto, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get Metric details.
            /// </summary>
            /// <remarks>
            /// Get Metric details for a specific Metric Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='metricId'>
            /// The identifier for a Metric.
            /// </param>
            public static RunMetric Get(this IRunMetricsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, System.Guid metricId)
            {
                return operations.GetAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, metricId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Metric details.
            /// </summary>
            /// <remarks>
            /// Get Metric details for a specific Metric Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='metricId'>
            /// The identifier for a Metric.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RunMetric> GetAsync(this IRunMetricsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, System.Guid metricId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, metricId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all Run Metrics for the specific Experiment.
            /// </summary>
            /// <remarks>
            /// Get all Run Metrics for the specific Experiment with the specified query
            /// filters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='queryParams'>
            /// Query Parameters for data sorting and filtering.
            /// </param>
            /// <param name='mergeStrategyType'>
            /// The type of merge strategy. Currently supported strategies are:
            /// None - all logged values are returned as individual metrics.
            /// MergeToVector - merges multiple values into a vector of values.
            /// Default - the system determines the behavior. Possible values include:
            /// 'Default', 'None', 'MergeToVector'
            /// </param>
            /// <param name='mergeStrategyOptions'>
            /// Controls behavior of the merge strategy in certain cases; e.g. when a
            /// metric is not merged. Possible values include: 'None',
            /// 'ReportUnmergedMetricsValues'
            /// </param>
            /// <param name='mergeStrategySettingsVersion'>
            /// The strategy settings version.
            /// </param>
            /// <param name='mergeStrategySettingsSelectMetrics'>
            /// Defines how to select metrics when merging them together. Possible values
            /// include: 'SelectAll', 'SelectByFirstValueSchema',
            /// 'SelectByFirstValueSchemaMergeNumericValues'
            /// </param>
            public static IPage<RunMetric> GetByQuery(this IRunMetricsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, QueryParams queryParams = default(QueryParams), string mergeStrategyType = default(string), string mergeStrategyOptions = default(string), string mergeStrategySettingsVersion = default(string), string mergeStrategySettingsSelectMetrics = default(string))
            {
                return operations.GetByQueryAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, queryParams, mergeStrategyType, mergeStrategyOptions, mergeStrategySettingsVersion, mergeStrategySettingsSelectMetrics).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all Run Metrics for the specific Experiment.
            /// </summary>
            /// <remarks>
            /// Get all Run Metrics for the specific Experiment with the specified query
            /// filters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='queryParams'>
            /// Query Parameters for data sorting and filtering.
            /// </param>
            /// <param name='mergeStrategyType'>
            /// The type of merge strategy. Currently supported strategies are:
            /// None - all logged values are returned as individual metrics.
            /// MergeToVector - merges multiple values into a vector of values.
            /// Default - the system determines the behavior. Possible values include:
            /// 'Default', 'None', 'MergeToVector'
            /// </param>
            /// <param name='mergeStrategyOptions'>
            /// Controls behavior of the merge strategy in certain cases; e.g. when a
            /// metric is not merged. Possible values include: 'None',
            /// 'ReportUnmergedMetricsValues'
            /// </param>
            /// <param name='mergeStrategySettingsVersion'>
            /// The strategy settings version.
            /// </param>
            /// <param name='mergeStrategySettingsSelectMetrics'>
            /// Defines how to select metrics when merging them together. Possible values
            /// include: 'SelectAll', 'SelectByFirstValueSchema',
            /// 'SelectByFirstValueSchemaMergeNumericValues'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RunMetric>> GetByQueryAsync(this IRunMetricsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, QueryParams queryParams = default(QueryParams), string mergeStrategyType = default(string), string mergeStrategyOptions = default(string), string mergeStrategySettingsVersion = default(string), string mergeStrategySettingsSelectMetrics = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByQueryWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, queryParams, mergeStrategyType, mergeStrategyOptions, mergeStrategySettingsVersion, mergeStrategySettingsSelectMetrics, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all Run Metrics for the specific Experiment.
            /// </summary>
            /// <remarks>
            /// Get all Run Metrics for the specific Experiment with the specified query
            /// filters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<RunMetric> GetByQueryNext(this IRunMetricsOperations operations, string nextPageLink)
            {
                return operations.GetByQueryNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all Run Metrics for the specific Experiment.
            /// </summary>
            /// <remarks>
            /// Get all Run Metrics for the specific Experiment with the specified query
            /// filters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RunMetric>> GetByQueryNextAsync(this IRunMetricsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByQueryNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
