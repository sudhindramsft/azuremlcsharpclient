// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.MachineLearning.Services
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ExperimentsOperations.
    /// </summary>
    public static partial class ExperimentsOperationsExtensions
    {
            /// <summary>
            /// Get details of an Experiment.
            /// </summary>
            /// <remarks>
            /// Get details of an Experiment with specific Experiment name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            public static Experiment Get(this IExperimentsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName)
            {
                return operations.GetAsync(subscriptionId, resourceGroupName, workspaceName, experimentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get details of an Experiment.
            /// </summary>
            /// <remarks>
            /// Get details of an Experiment with specific Experiment name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Experiment> GetAsync(this IExperimentsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create an Experiment.
            /// </summary>
            /// <remarks>
            /// Create a new Experiment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            public static Experiment Create(this IExperimentsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName)
            {
                return operations.CreateAsync(subscriptionId, resourceGroupName, workspaceName, experimentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create an Experiment.
            /// </summary>
            /// <remarks>
            /// Create a new Experiment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Experiment> CreateAsync(this IExperimentsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get details of an Experiment.
            /// </summary>
            /// <remarks>
            /// Get details of an Experiment with specific Experiment Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentId'>
            /// The identifier of the experiment.
            /// </param>
            public static Experiment GetById(this IExperimentsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentId)
            {
                return operations.GetByIdAsync(subscriptionId, resourceGroupName, workspaceName, experimentId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get details of an Experiment.
            /// </summary>
            /// <remarks>
            /// Get details of an Experiment with specific Experiment Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentId'>
            /// The identifier of the experiment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Experiment> GetByIdAsync(this IExperimentsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update details of an Experiment.
            /// </summary>
            /// <remarks>
            /// Update details of an Experiment with specific Experiment Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentId'>
            /// The identifier of the experiment.
            /// </param>
            /// <param name='modifyExperimentDto'>
            /// Experiment details which needs to be updated.
            /// </param>
            public static Experiment Update(this IExperimentsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentId, ModifyExperiment modifyExperimentDto = default(ModifyExperiment))
            {
                return operations.UpdateAsync(subscriptionId, resourceGroupName, workspaceName, experimentId, modifyExperimentDto).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update details of an Experiment.
            /// </summary>
            /// <remarks>
            /// Update details of an Experiment with specific Experiment Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentId'>
            /// The identifier of the experiment.
            /// </param>
            /// <param name='modifyExperimentDto'>
            /// Experiment details which needs to be updated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Experiment> UpdateAsync(this IExperimentsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentId, ModifyExperiment modifyExperimentDto = default(ModifyExperiment), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentId, modifyExperimentDto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all Experiments in a specific workspace.
            /// </summary>
            /// <remarks>
            /// Get all experiments in a specific workspace with the specified query
            /// filters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='queryParams'>
            /// Query parameters for data sorting and filtering.
            /// </param>
            public static IPage<Experiment> GetByQuery(this IExperimentsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, QueryParams queryParams = default(QueryParams))
            {
                return operations.GetByQueryAsync(subscriptionId, resourceGroupName, workspaceName, queryParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all Experiments in a specific workspace.
            /// </summary>
            /// <remarks>
            /// Get all experiments in a specific workspace with the specified query
            /// filters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='queryParams'>
            /// Query parameters for data sorting and filtering.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Experiment>> GetByQueryAsync(this IExperimentsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, QueryParams queryParams = default(QueryParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByQueryWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, queryParams, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete list of Tags in an Experiment.
            /// </summary>
            /// <remarks>
            /// Delete list of Tags from a specific Experiment Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentId'>
            /// The identifier of the experiment.
            /// </param>
            /// <param name='tags'>
            /// The requested tags list to be deleted.
            /// </param>
            public static Experiment DeleteTags(this IExperimentsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentId, DeleteTagsCommand tags = default(DeleteTagsCommand))
            {
                return operations.DeleteTagsAsync(subscriptionId, resourceGroupName, workspaceName, experimentId, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete list of Tags in an Experiment.
            /// </summary>
            /// <remarks>
            /// Delete list of Tags from a specific Experiment Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentId'>
            /// The identifier of the experiment.
            /// </param>
            /// <param name='tags'>
            /// The requested tags list to be deleted.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Experiment> DeleteTagsAsync(this IExperimentsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentId, DeleteTagsCommand tags = default(DeleteTagsCommand), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteTagsWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentId, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all Experiments in a specific workspace.
            /// </summary>
            /// <remarks>
            /// Get all experiments in a specific workspace with the specified query
            /// filters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Experiment> GetByQueryNext(this IExperimentsOperations operations, string nextPageLink)
            {
                return operations.GetByQueryNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all Experiments in a specific workspace.
            /// </summary>
            /// <remarks>
            /// Get all experiments in a specific workspace with the specified query
            /// filters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Experiment>> GetByQueryNextAsync(this IExperimentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByQueryNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
