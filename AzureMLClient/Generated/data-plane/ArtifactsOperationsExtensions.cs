// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.MachineLearning.Services
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ArtifactsOperations.
    /// </summary>
    public static partial class ArtifactsOperationsExtensions
    {
            /// <summary>
            /// Create Artifact.
            /// </summary>
            /// <remarks>
            /// Create an Artifact.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='artifact'>
            /// The Artifact details.
            /// </param>
            public static Artifact Create(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, Artifact artifact)
            {
                return operations.CreateAsync(subscriptionId, resourceGroupName, workspaceName, artifact).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Artifact.
            /// </summary>
            /// <remarks>
            /// Create an Artifact.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='artifact'>
            /// The Artifact details.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Artifact> CreateAsync(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, Artifact artifact, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, artifact, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create an Artifact for an existing data location.
            /// </summary>
            /// <remarks>
            /// Create an Artifact for an existing dataPath.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='artifact'>
            /// The Artifact creation details.
            /// </param>
            public static Artifact Register(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, Artifact artifact)
            {
                return operations.RegisterAsync(subscriptionId, resourceGroupName, workspaceName, artifact).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create an Artifact for an existing data location.
            /// </summary>
            /// <remarks>
            /// Create an Artifact for an existing dataPath.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='artifact'>
            /// The Artifact creation details.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Artifact> RegisterAsync(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, Artifact artifact, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegisterWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, artifact, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Artifact metadata by Id.
            /// </summary>
            /// <remarks>
            /// Get Artifact metadata for a specific Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='origin'>
            /// The origin of the Artifact.
            /// </param>
            /// <param name='container'>
            /// The container name.
            /// </param>
            /// <param name='path'>
            /// The Artifact Path.
            /// </param>
            public static Artifact Get(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, string path)
            {
                return operations.GetAsync(subscriptionId, resourceGroupName, workspaceName, origin, container, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Artifact metadata by Id.
            /// </summary>
            /// <remarks>
            /// Get Artifact metadata for a specific Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='origin'>
            /// The origin of the Artifact.
            /// </param>
            /// <param name='container'>
            /// The container name.
            /// </param>
            /// <param name='path'>
            /// The Artifact Path.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Artifact> GetAsync(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, string path, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, origin, container, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Artifact Metadata.
            /// </summary>
            /// <remarks>
            /// Delete an Artifact Metadata.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='origin'>
            /// The origin of the Artifact.
            /// </param>
            /// <param name='container'>
            /// The container name.
            /// </param>
            /// <param name='path'>
            /// The Artifact Path.
            /// </param>
            /// <param name='hardDelete'>
            /// If set to true. The delete cannot be revert at later time.
            /// </param>
            public static void DeleteMetaData(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, string path = default(string), bool? hardDelete = false)
            {
                operations.DeleteMetaDataAsync(subscriptionId, resourceGroupName, workspaceName, origin, container, path, hardDelete).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Artifact Metadata.
            /// </summary>
            /// <remarks>
            /// Delete an Artifact Metadata.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='origin'>
            /// The origin of the Artifact.
            /// </param>
            /// <param name='container'>
            /// The container name.
            /// </param>
            /// <param name='path'>
            /// The Artifact Path.
            /// </param>
            /// <param name='hardDelete'>
            /// If set to true. The delete cannot be revert at later time.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteMetaDataAsync(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, string path = default(string), bool? hardDelete = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteMetaDataWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, origin, container, path, hardDelete, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get Artifacts metadata in a container or path.
            /// </summary>
            /// <remarks>
            /// Get Artifacts metadata in a specific container or path.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='origin'>
            /// The origin of the Artifact.
            /// </param>
            /// <param name='container'>
            /// The container name.
            /// </param>
            /// <param name='path'>
            /// The Artifact Path.
            /// </param>
            /// <param name='continuationToken'>
            /// The continuation token.
            /// </param>
            public static IPage<Artifact> ListInContainer(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, string path = default(string), string continuationToken = default(string))
            {
                return operations.ListInContainerAsync(subscriptionId, resourceGroupName, workspaceName, origin, container, path, continuationToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Artifacts metadata in a container or path.
            /// </summary>
            /// <remarks>
            /// Get Artifacts metadata in a specific container or path.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='origin'>
            /// The origin of the Artifact.
            /// </param>
            /// <param name='container'>
            /// The container name.
            /// </param>
            /// <param name='path'>
            /// The Artifact Path.
            /// </param>
            /// <param name='continuationToken'>
            /// The continuation token.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Artifact>> ListInContainerAsync(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, string path = default(string), string continuationToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInContainerWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, origin, container, path, continuationToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Artifact content by Id.
            /// </summary>
            /// <remarks>
            /// Get Artifact content of a specific Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='origin'>
            /// The origin of the Artifact.
            /// </param>
            /// <param name='container'>
            /// The container name.
            /// </param>
            /// <param name='path'>
            /// The Artifact Path.
            /// </param>
            public static Stream Download(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, string path = default(string))
            {
                return operations.DownloadAsync(subscriptionId, resourceGroupName, workspaceName, origin, container, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Artifact content by Id.
            /// </summary>
            /// <remarks>
            /// Get Artifact content of a specific Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='origin'>
            /// The origin of the Artifact.
            /// </param>
            /// <param name='container'>
            /// The container name.
            /// </param>
            /// <param name='path'>
            /// The Artifact Path.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> DownloadAsync(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.DownloadWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, origin, container, path, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Upload Artifact content.
            /// </summary>
            /// <remarks>
            /// Upload content to an Artifact.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='origin'>
            /// The origin of the Artifact.
            /// </param>
            /// <param name='container'>
            /// The container name.
            /// </param>
            /// <param name='content'>
            /// The file upload.
            /// </param>
            /// <param name='path'>
            /// The Artifact Path.
            /// </param>
            /// <param name='index'>
            /// The index.
            /// </param>
            /// <param name='append'>
            /// Whether or not to append the content or replace it.
            /// </param>
            /// <param name='allowOverwrite'>
            /// whether to allow overwrite if Artifact Content exist already. when set to
            /// true, Overwrite happens if Artifact Content already exists
            /// </param>
            public static Artifact Upload(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, string content, string path = default(string), int? index = default(int?), bool? append = false, bool? allowOverwrite = false)
            {
                return operations.UploadAsync(subscriptionId, resourceGroupName, workspaceName, origin, container, content, path, index, append, allowOverwrite).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Upload Artifact content.
            /// </summary>
            /// <remarks>
            /// Upload content to an Artifact.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='origin'>
            /// The origin of the Artifact.
            /// </param>
            /// <param name='container'>
            /// The container name.
            /// </param>
            /// <param name='content'>
            /// The file upload.
            /// </param>
            /// <param name='path'>
            /// The Artifact Path.
            /// </param>
            /// <param name='index'>
            /// The index.
            /// </param>
            /// <param name='append'>
            /// Whether or not to append the content or replace it.
            /// </param>
            /// <param name='allowOverwrite'>
            /// whether to allow overwrite if Artifact Content exist already. when set to
            /// true, Overwrite happens if Artifact Content already exists
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Artifact> UploadAsync(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, string content, string path = default(string), int? index = default(int?), bool? append = false, bool? allowOverwrite = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, origin, container, content, path, index, append, allowOverwrite, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Artifact content information.
            /// </summary>
            /// <remarks>
            /// Get content information of an Artifact.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='origin'>
            /// The origin of the Artifact.
            /// </param>
            /// <param name='container'>
            /// The container name.
            /// </param>
            /// <param name='path'>
            /// The Artifact Path.
            /// </param>
            public static ArtifactContentInformation GetContentInformation(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, string path = default(string))
            {
                return operations.GetContentInformationAsync(subscriptionId, resourceGroupName, workspaceName, origin, container, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Artifact content information.
            /// </summary>
            /// <remarks>
            /// Get content information of an Artifact.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='origin'>
            /// The origin of the Artifact.
            /// </param>
            /// <param name='container'>
            /// The container name.
            /// </param>
            /// <param name='path'>
            /// The Artifact Path.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ArtifactContentInformation> GetContentInformationAsync(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetContentInformationWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, origin, container, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Artifact storage content information.
            /// </summary>
            /// <remarks>
            /// Get storage content information of an Artifact.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='origin'>
            /// The origin of the Artifact.
            /// </param>
            /// <param name='container'>
            /// The container name.
            /// </param>
            /// <param name='path'>
            /// The Artifact Path.
            /// </param>
            public static ArtifactContentInformation GetStorageContentInformation(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, string path = default(string))
            {
                return operations.GetStorageContentInformationAsync(subscriptionId, resourceGroupName, workspaceName, origin, container, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Artifact storage content information.
            /// </summary>
            /// <remarks>
            /// Get storage content information of an Artifact.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='origin'>
            /// The origin of the Artifact.
            /// </param>
            /// <param name='container'>
            /// The container name.
            /// </param>
            /// <param name='path'>
            /// The Artifact Path.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ArtifactContentInformation> GetStorageContentInformationAsync(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStorageContentInformationWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, origin, container, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get writable shared access signature for Artifact.
            /// </summary>
            /// <remarks>
            /// Get writable shared access signature for a specific Artifact.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='origin'>
            /// The origin of the Artifact.
            /// </param>
            /// <param name='container'>
            /// The container name.
            /// </param>
            /// <param name='path'>
            /// The Artifact Path.
            /// </param>
            public static ArtifactContentInformation GetSas(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, string path = default(string))
            {
                return operations.GetSasAsync(subscriptionId, resourceGroupName, workspaceName, origin, container, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get writable shared access signature for Artifact.
            /// </summary>
            /// <remarks>
            /// Get writable shared access signature for a specific Artifact.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='origin'>
            /// The origin of the Artifact.
            /// </param>
            /// <param name='container'>
            /// The container name.
            /// </param>
            /// <param name='path'>
            /// The Artifact Path.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ArtifactContentInformation> GetSasAsync(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSasWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, origin, container, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get shared access signature for an Artifact
            /// </summary>
            /// <remarks>
            /// Get shared access signature for an Artifact in specific path.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='origin'>
            /// The origin of the Artifact.
            /// </param>
            /// <param name='container'>
            /// The container name.
            /// </param>
            /// <param name='path'>
            /// The Artifact Path.
            /// </param>
            /// <param name='continuationToken'>
            /// The continuation token.
            /// </param>
            public static IPage<ArtifactContentInformation> ListSasByPrefix(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, string path = default(string), string continuationToken = default(string))
            {
                return operations.ListSasByPrefixAsync(subscriptionId, resourceGroupName, workspaceName, origin, container, path, continuationToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get shared access signature for an Artifact
            /// </summary>
            /// <remarks>
            /// Get shared access signature for an Artifact in specific path.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='origin'>
            /// The origin of the Artifact.
            /// </param>
            /// <param name='container'>
            /// The container name.
            /// </param>
            /// <param name='path'>
            /// The Artifact Path.
            /// </param>
            /// <param name='continuationToken'>
            /// The continuation token.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ArtifactContentInformation>> ListSasByPrefixAsync(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, string path = default(string), string continuationToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSasByPrefixWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, origin, container, path, continuationToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get storage Uri for Artifacts in a path.
            /// </summary>
            /// <remarks>
            /// Get storage Uri for Artifacts in a specific path.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='origin'>
            /// The origin of the Artifact.
            /// </param>
            /// <param name='container'>
            /// The container name.
            /// </param>
            /// <param name='path'>
            /// The Artifact Path.
            /// </param>
            /// <param name='continuationToken'>
            /// The continuation token.
            /// </param>
            public static IPage<ArtifactContentInformation> ListStorageUriByPrefix(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, string path = default(string), string continuationToken = default(string))
            {
                return operations.ListStorageUriByPrefixAsync(subscriptionId, resourceGroupName, workspaceName, origin, container, path, continuationToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get storage Uri for Artifacts in a path.
            /// </summary>
            /// <remarks>
            /// Get storage Uri for Artifacts in a specific path.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='origin'>
            /// The origin of the Artifact.
            /// </param>
            /// <param name='container'>
            /// The container name.
            /// </param>
            /// <param name='path'>
            /// The Artifact Path.
            /// </param>
            /// <param name='continuationToken'>
            /// The continuation token.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ArtifactContentInformation>> ListStorageUriByPrefixAsync(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, string path = default(string), string continuationToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListStorageUriByPrefixWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, origin, container, path, continuationToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Batch Artifacts by Ids.
            /// </summary>
            /// <remarks>
            /// Get Batch Artifacts by the specific Ids.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='artifactIds'>
            /// The command for Batch Artifact get request.
            /// </param>
            public static BatchArtifactContentInformationResult BatchGetById(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, ArtifactIdList artifactIds)
            {
                return operations.BatchGetByIdAsync(subscriptionId, resourceGroupName, workspaceName, artifactIds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Batch Artifacts by Ids.
            /// </summary>
            /// <remarks>
            /// Get Batch Artifacts by the specific Ids.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='artifactIds'>
            /// The command for Batch Artifact get request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BatchArtifactContentInformationResult> BatchGetByIdAsync(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, ArtifactIdList artifactIds, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BatchGetByIdWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, artifactIds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Batch Artifacts storage by Ids.
            /// </summary>
            /// <remarks>
            /// Get Batch Artifacts storage by specific Ids.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='artifactIds'>
            /// The list of artifactIds to get.
            /// </param>
            public static BatchArtifactContentInformationResult BatchGetStorageById(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, ArtifactIdList artifactIds)
            {
                return operations.BatchGetStorageByIdAsync(subscriptionId, resourceGroupName, workspaceName, artifactIds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Batch Artifacts storage by Ids.
            /// </summary>
            /// <remarks>
            /// Get Batch Artifacts storage by specific Ids.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='artifactIds'>
            /// The list of artifactIds to get.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BatchArtifactContentInformationResult> BatchGetStorageByIdAsync(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, ArtifactIdList artifactIds, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BatchGetStorageByIdWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, artifactIds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Batch ingest using shared access signature.
            /// </summary>
            /// <remarks>
            /// Ingest Batch Artifacts using shared access signature.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='origin'>
            /// The origin of the Artifact.
            /// </param>
            /// <param name='container'>
            /// The container name.
            /// </param>
            /// <param name='artifactContainerSas'>
            /// The artifact container shared access signature to use for batch ingest.
            /// </param>
            public static IPage<Artifact> BatchIngestFromSas(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, ArtifactContainerSas artifactContainerSas)
            {
                return operations.BatchIngestFromSasAsync(subscriptionId, resourceGroupName, workspaceName, origin, container, artifactContainerSas).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Batch ingest using shared access signature.
            /// </summary>
            /// <remarks>
            /// Ingest Batch Artifacts using shared access signature.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='origin'>
            /// The origin of the Artifact.
            /// </param>
            /// <param name='container'>
            /// The container name.
            /// </param>
            /// <param name='artifactContainerSas'>
            /// The artifact container shared access signature to use for batch ingest.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Artifact>> BatchIngestFromSasAsync(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, ArtifactContainerSas artifactContainerSas, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BatchIngestFromSasWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, origin, container, artifactContainerSas, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a batch of empty Artifacts.
            /// </summary>
            /// <remarks>
            /// Create a Batch of empty Artifacts from the supplied paths.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='origin'>
            /// The origin of the Artifact.
            /// </param>
            /// <param name='container'>
            /// The container name.
            /// </param>
            /// <param name='artifactPaths'>
            /// The list of Artifact paths to create.
            /// </param>
            public static BatchArtifactContentInformationResult BatchCreateEmptyArtifacts(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, ArtifactPathList artifactPaths)
            {
                return operations.BatchCreateEmptyArtifactsAsync(subscriptionId, resourceGroupName, workspaceName, origin, container, artifactPaths).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a batch of empty Artifacts.
            /// </summary>
            /// <remarks>
            /// Create a Batch of empty Artifacts from the supplied paths.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='origin'>
            /// The origin of the Artifact.
            /// </param>
            /// <param name='container'>
            /// The container name.
            /// </param>
            /// <param name='artifactPaths'>
            /// The list of Artifact paths to create.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BatchArtifactContentInformationResult> BatchCreateEmptyArtifactsAsync(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, ArtifactPathList artifactPaths, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BatchCreateEmptyArtifactsWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, origin, container, artifactPaths, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Batch of Artifact Metadata.
            /// </summary>
            /// <remarks>
            /// Delete a Batch of Artifact Metadata.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='origin'>
            /// The origin of the Artifact.
            /// </param>
            /// <param name='container'>
            /// The container name.
            /// </param>
            /// <param name='artifactPaths'>
            /// The list of Artifact paths to delete.
            /// </param>
            /// <param name='hardDelete'>
            /// If set to true, the delete cannot be reverted at a later time.
            /// </param>
            public static void DeleteBatchMetaData(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, ArtifactPathList artifactPaths, bool? hardDelete = false)
            {
                operations.DeleteBatchMetaDataAsync(subscriptionId, resourceGroupName, workspaceName, origin, container, artifactPaths, hardDelete).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Batch of Artifact Metadata.
            /// </summary>
            /// <remarks>
            /// Delete a Batch of Artifact Metadata.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='origin'>
            /// The origin of the Artifact.
            /// </param>
            /// <param name='container'>
            /// The container name.
            /// </param>
            /// <param name='artifactPaths'>
            /// The list of Artifact paths to delete.
            /// </param>
            /// <param name='hardDelete'>
            /// If set to true, the delete cannot be reverted at a later time.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteBatchMetaDataAsync(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, ArtifactPathList artifactPaths, bool? hardDelete = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteBatchMetaDataWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, origin, container, artifactPaths, hardDelete, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete Artifact Metadata.
            /// </summary>
            /// <remarks>
            /// Delete Artifact Metadata in a specific container.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='origin'>
            /// The origin of the Artifact.
            /// </param>
            /// <param name='container'>
            /// The container name.
            /// </param>
            /// <param name='hardDelete'>
            /// If set to true. The delete cannot be revert at later time.
            /// </param>
            public static void DeleteMetaDataInContainer(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, bool? hardDelete = false)
            {
                operations.DeleteMetaDataInContainerAsync(subscriptionId, resourceGroupName, workspaceName, origin, container, hardDelete).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Artifact Metadata.
            /// </summary>
            /// <remarks>
            /// Delete Artifact Metadata in a specific container.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='origin'>
            /// The origin of the Artifact.
            /// </param>
            /// <param name='container'>
            /// The container name.
            /// </param>
            /// <param name='hardDelete'>
            /// If set to true. The delete cannot be revert at later time.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteMetaDataInContainerAsync(this IArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string origin, string container, bool? hardDelete = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteMetaDataInContainerWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, origin, container, hardDelete, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get Artifacts metadata in a container or path.
            /// </summary>
            /// <remarks>
            /// Get Artifacts metadata in a specific container or path.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Artifact> ListInContainerNext(this IArtifactsOperations operations, string nextPageLink)
            {
                return operations.ListInContainerNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Artifacts metadata in a container or path.
            /// </summary>
            /// <remarks>
            /// Get Artifacts metadata in a specific container or path.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Artifact>> ListInContainerNextAsync(this IArtifactsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInContainerNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get shared access signature for an Artifact
            /// </summary>
            /// <remarks>
            /// Get shared access signature for an Artifact in specific path.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ArtifactContentInformation> ListSasByPrefixNext(this IArtifactsOperations operations, string nextPageLink)
            {
                return operations.ListSasByPrefixNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get shared access signature for an Artifact
            /// </summary>
            /// <remarks>
            /// Get shared access signature for an Artifact in specific path.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ArtifactContentInformation>> ListSasByPrefixNextAsync(this IArtifactsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSasByPrefixNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get storage Uri for Artifacts in a path.
            /// </summary>
            /// <remarks>
            /// Get storage Uri for Artifacts in a specific path.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ArtifactContentInformation> ListStorageUriByPrefixNext(this IArtifactsOperations operations, string nextPageLink)
            {
                return operations.ListStorageUriByPrefixNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get storage Uri for Artifacts in a path.
            /// </summary>
            /// <remarks>
            /// Get storage Uri for Artifacts in a specific path.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ArtifactContentInformation>> ListStorageUriByPrefixNextAsync(this IArtifactsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListStorageUriByPrefixNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Batch ingest using shared access signature.
            /// </summary>
            /// <remarks>
            /// Ingest Batch Artifacts using shared access signature.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Artifact> BatchIngestFromSasNext(this IArtifactsOperations operations, string nextPageLink)
            {
                return operations.BatchIngestFromSasNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Batch ingest using shared access signature.
            /// </summary>
            /// <remarks>
            /// Ingest Batch Artifacts using shared access signature.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Artifact>> BatchIngestFromSasNextAsync(this IArtifactsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BatchIngestFromSasNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
