// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.MachineLearning.Services
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// HyperparameterTuningOperations operations.
    /// </summary>
    public partial interface IHyperparameterTuningOperations
    {
        /// <summary>
        /// Create an Experiment.
        /// </summary>
        /// <remarks>
        /// Create a HyperDrive Experiment.
        /// </remarks>
        /// <param name='armScope'>
        /// The ARM scope passed in through URL with format:
        /// subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}.
        /// </param>
        /// <param name='config'>
        /// The configuration file with experiment JSON content. A text file
        /// that is a JSON-serialized
        /// '#/definitions/HyperDriveCreateExperiment' object.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HyperDriveErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<HyperDriveExperimentResponse>> CreateExperimentWithHttpMessagesAsync(string armScope, Stream config, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Cancel an Experiment.
        /// </summary>
        /// <remarks>
        /// Cancel a HyperDrive Experiment.
        /// </remarks>
        /// <param name='armScope'>
        /// The ARM scope passed in through URL with format:
        /// subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}.
        /// </param>
        /// <param name='runId'>
        /// Hyperdrive run id to cancel.
        /// </param>
        /// <param name='runHistoryHost'>
        /// The host for run location.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="HyperDriveErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<HyperDriveCancelExperimentResponse>> CancelExperimentWithHttpMessagesAsync(string armScope, string runId, string runHistoryHost = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
