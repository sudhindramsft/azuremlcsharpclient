// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.MachineLearning.Services
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// ServicesOperations operations.
    /// </summary>
    public partial interface IServicesOperations
    {
        /// <summary>
        /// Get a Service.
        /// </summary>
        /// <remarks>
        /// Get a Service by Id.
        /// </remarks>
        /// <param name='subscriptionId'>
        /// The Azure Subscription ID.
        /// </param>
        /// <param name='resourceGroup'>
        /// The Name of the resource group in which the workspace is located.
        /// </param>
        /// <param name='workspace'>
        /// The name of the workspace.
        /// </param>
        /// <param name='id'>
        /// The Service Id.
        /// </param>
        /// <param name='expand'>
        /// Set to True to include Model details.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ModelErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<ServiceResponseBase>> QueryByIdWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroup, string workspace, string id, bool? expand = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a Service.
        /// </summary>
        /// <remarks>
        /// Delete a specific Service.
        /// </remarks>
        /// <param name='subscriptionId'>
        /// The Azure Subscription ID.
        /// </param>
        /// <param name='resourceGroup'>
        /// The Name of the resource group in which the workspace is located.
        /// </param>
        /// <param name='workspace'>
        /// The name of the workspace.
        /// </param>
        /// <param name='id'>
        /// The Service Id.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ModelErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse> DeleteWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroup, string workspace, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Patch a Service.
        /// </summary>
        /// <remarks>
        /// Patch a specific Service.
        /// </remarks>
        /// <param name='subscriptionId'>
        /// The Azure Subscription ID.
        /// </param>
        /// <param name='resourceGroup'>
        /// The Name of the resource group in which the workspace is located.
        /// </param>
        /// <param name='workspace'>
        /// The name of the workspace.
        /// </param>
        /// <param name='id'>
        /// The Service Id.
        /// </param>
        /// <param name='patch'>
        /// The payload that is used to patch the Service.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ModelErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse> PatchWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroup, string workspace, string id, IList<JsonPatchOperation> patch, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Query the list of Services in a Workspace.
        /// </summary>
        /// <remarks>
        /// If no filter is passed, the query lists all Services in the
        /// Workspace. The returned list is paginated and the count of item in
        /// each page is an optional parameter.
        /// </remarks>
        /// <param name='subscriptionId'>
        /// The Azure Subscription ID.
        /// </param>
        /// <param name='resourceGroup'>
        /// The Name of the resource group in which the workspace is located.
        /// </param>
        /// <param name='workspace'>
        /// The name of the workspace.
        /// </param>
        /// <param name='imageId'>
        /// The Image Id.
        /// </param>
        /// <param name='imageName'>
        /// The Image name.
        /// </param>
        /// <param name='modelId'>
        /// The Model Id.
        /// </param>
        /// <param name='modelName'>
        /// The Model name.
        /// </param>
        /// <param name='name'>
        /// The object name.
        /// </param>
        /// <param name='count'>
        /// The number of items to retrieve in a page.
        /// </param>
        /// <param name='computeType'>
        /// The compute environment type.
        /// </param>
        /// <param name='skipToken'>
        /// The continuation token to retrieve the next page.
        /// </param>
        /// <param name='tags'>
        /// A set of tags with which to filter the returned models.
        /// It is a comma separated string of tags key or tags key=value
        /// Example: tagKey1,tagKey2,tagKey3=value3
        /// </param>
        /// <param name='properties'>
        /// A set of properties with which to filter the returned models.
        /// It is a comma separated string of properties key and/or properties
        /// key=value
        /// Example: propKey1,propKey2,propKey3=value3
        /// </param>
        /// <param name='expand'>
        /// Set to True to include Model details.
        /// </param>
        /// <param name='orderby'>
        /// The option to order the response. Possible values include:
        /// 'CreatedAtDesc', 'CreatedAtAsc', 'UpdatedAtDesc', 'UpdatedAtAsc'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ModelErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<IPage<ServiceResponseBase>>> ListQueryWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroup, string workspace, string imageId = default(string), string imageName = default(string), string modelId = default(string), string modelName = default(string), string name = default(string), int? count = default(int?), string computeType = default(string), string skipToken = default(string), string tags = default(string), string properties = default(string), bool? expand = false, string orderby = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a Service.
        /// </summary>
        /// <remarks>
        /// Create a Service with the specified payload.
        /// </remarks>
        /// <param name='subscriptionId'>
        /// The Azure Subscription ID.
        /// </param>
        /// <param name='resourceGroup'>
        /// The Name of the resource group in which the workspace is located.
        /// </param>
        /// <param name='workspace'>
        /// The name of the workspace.
        /// </param>
        /// <param name='request'>
        /// The payload that is used to create the Service.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ModelErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse> CreateWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroup, string workspace, CreateServiceRequest request, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Lists Service keys.
        /// </summary>
        /// <remarks>
        /// Gets a list of Service keys.
        /// </remarks>
        /// <param name='subscriptionId'>
        /// The Azure Subscription ID.
        /// </param>
        /// <param name='resourceGroup'>
        /// The Name of the resource group in which the workspace is located.
        /// </param>
        /// <param name='workspace'>
        /// The name of the workspace.
        /// </param>
        /// <param name='id'>
        /// The Service Id.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ModelErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<AuthKeys>> ListServiceKeysWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroup, string workspace, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Regenerate Service Keys.
        /// </summary>
        /// <remarks>
        /// Regenerate and return the Service keys.
        /// </remarks>
        /// <param name='subscriptionId'>
        /// The Azure Subscription ID.
        /// </param>
        /// <param name='resourceGroup'>
        /// The Name of the resource group in which the workspace is located.
        /// </param>
        /// <param name='workspace'>
        /// The name of the workspace.
        /// </param>
        /// <param name='id'>
        /// The Service Id.
        /// </param>
        /// <param name='request'>
        /// The payload that is used to regenerate keys.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ModelErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<AuthKeys>> RegenerateServiceKeysWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroup, string workspace, string id, RegenerateServiceKeysRequest request, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Generate Service Access Token.
        /// </summary>
        /// <remarks>
        /// Gets access token that can be used for calling service.
        /// </remarks>
        /// <param name='subscriptionId'>
        /// The Azure Subscription ID.
        /// </param>
        /// <param name='resourceGroup'>
        /// The Name of the resource group in which the workspace is located.
        /// </param>
        /// <param name='workspace'>
        /// The name of the workspace.
        /// </param>
        /// <param name='id'>
        /// The Service Id.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ModelErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<AuthToken>> GetServiceTokenWithHttpMessagesAsync(System.Guid subscriptionId, string resourceGroup, string workspace, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Query the list of Services in a Workspace.
        /// </summary>
        /// <remarks>
        /// If no filter is passed, the query lists all Services in the
        /// Workspace. The returned list is paginated and the count of item in
        /// each page is an optional parameter.
        /// </remarks>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ModelErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<IPage<ServiceResponseBase>>> ListQueryNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
