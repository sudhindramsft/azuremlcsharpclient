// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.MachineLearning.Services
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RunsOperations.
    /// </summary>
    public static partial class RunsOperationsExtensions
    {
            /// <summary>
            /// Start a run on a local machine.
            /// </summary>
            /// <remarks>
            /// Starts an experiment run using the provided definition.json file to define
            /// the run.
            /// The source code and configuration is defined in a zip archive in
            /// project.zip.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='definition'>
            /// A JSON run definition structure.
            /// </param>
            /// <param name='runId'>
            /// A run id. If not supplied a run id will be created automatically.
            /// </param>
            public static Stream StartLocalRun(this IRunsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, RunDefinition definition, string runId = default(string))
            {
                return operations.StartLocalRunAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, definition, runId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start a run on a local machine.
            /// </summary>
            /// <remarks>
            /// Starts an experiment run using the provided definition.json file to define
            /// the run.
            /// The source code and configuration is defined in a zip archive in
            /// project.zip.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='definition'>
            /// A JSON run definition structure.
            /// </param>
            /// <param name='runId'>
            /// A run id. If not supplied a run id will be created automatically.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> StartLocalRunAsync(this IRunsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, RunDefinition definition, string runId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.StartLocalRunWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, definition, runId, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Start a run on a remote compute target.
            /// </summary>
            /// <remarks>
            /// Starts an experiment run using the provided definition.json file to define
            /// the run.
            /// The source code and configuration is defined in a zip archive in
            /// project.zip.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runDefinitionFile'>
            /// The JSON file containing the RunDefinition
            /// </param>
            /// <param name='projectZipFile'>
            /// The zip archive of the project folder containing the source code to use for
            /// the run.
            /// </param>
            /// <param name='runId'>
            /// A run id. If not supplied a run id will be created automatically.
            /// </param>
            public static StartRunResult StartRun(this IRunsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, Stream runDefinitionFile, Stream projectZipFile, string runId = default(string))
            {
                return operations.StartRunAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runDefinitionFile, projectZipFile, runId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start a run on a remote compute target.
            /// </summary>
            /// <remarks>
            /// Starts an experiment run using the provided definition.json file to define
            /// the run.
            /// The source code and configuration is defined in a zip archive in
            /// project.zip.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runDefinitionFile'>
            /// The JSON file containing the RunDefinition
            /// </param>
            /// <param name='projectZipFile'>
            /// The zip archive of the project folder containing the source code to use for
            /// the run.
            /// </param>
            /// <param name='runId'>
            /// A run id. If not supplied a run id will be created automatically.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StartRunResult> StartRunAsync(this IRunsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, Stream runDefinitionFile, Stream projectZipFile, string runId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartRunWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runDefinitionFile, projectZipFile, runId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start a run from a snapshot on a remote compute target.
            /// </summary>
            /// <remarks>
            /// Starts an experiment run on the remote compute target using the provided
            /// definition.json file to define the run.
            /// The code for the run is retrieved using the snapshotId in definition.json.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='definition'>
            /// A JSON run definition structure.
            /// </param>
            /// <param name='runId'>
            /// A run id. If not supplied a run id will be created automatically.
            /// </param>
            public static StartRunResult StartSnapshotRun(this IRunsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, RunDefinition definition, string runId = default(string))
            {
                return operations.StartSnapshotRunAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, definition, runId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start a run from a snapshot on a remote compute target.
            /// </summary>
            /// <remarks>
            /// Starts an experiment run on the remote compute target using the provided
            /// definition.json file to define the run.
            /// The code for the run is retrieved using the snapshotId in definition.json.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='definition'>
            /// A JSON run definition structure.
            /// </param>
            /// <param name='runId'>
            /// A run id. If not supplied a run id will be created automatically.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StartRunResult> StartSnapshotRunAsync(this IRunsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, RunDefinition definition, string runId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartSnapshotRunWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, definition, runId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancel a run.
            /// </summary>
            /// <remarks>
            /// Cancels a run within an experiment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runId'>
            /// The id of the run to cancel.
            /// </param>
            public static StartRunResult CancelRunWithUri(this IRunsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId)
            {
                return operations.CancelRunWithUriAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel a run.
            /// </summary>
            /// <remarks>
            /// Cancels a run within an experiment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runId'>
            /// The id of the run to cancel.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StartRunResult> CancelRunWithUriAsync(this IRunsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CancelRunWithUriWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get details of all child runs.
            /// </summary>
            /// <remarks>
            /// Get details of all child runs for the specified Run Id with the specified
            /// filters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runId'>
            /// The identifier of the Run.
            /// </param>
            /// <param name='filter'>
            /// Allows for filtering the collection of resources.
            /// The expression specified is evaluated for each resource in the collection,
            /// and only items where the expression evaluates to true are included in the
            /// response.
            /// </param>
            /// <param name='continuationtoken'>
            /// The continuation token to use for getting the next set of resources.
            /// </param>
            /// <param name='orderby'>
            /// The list of resource properties to use for sorting the requested resources.
            /// </param>
            /// <param name='sortorder'>
            /// The sort order of the returned resources. Not used, specify asc or desc
            /// after each property name in the OrderBy parameter. Possible values include:
            /// 'Asc', 'Desc'
            /// </param>
            /// <param name='top'>
            /// The maximum number of items in the resource collection to be included in
            /// the result.
            /// If not specified, all items are returned.
            /// </param>
            /// <param name='count'>
            /// Whether to include a count of the matching resources along with the
            /// resources returned in the response.
            /// </param>
            public static IPage<Run> GetChild(this IRunsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string filter = default(string), string continuationtoken = default(string), IList<string> orderby = default(IList<string>), string sortorder = default(string), int? top = default(int?), bool? count = default(bool?))
            {
                return operations.GetChildAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, filter, continuationtoken, orderby, sortorder, top, count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get details of all child runs.
            /// </summary>
            /// <remarks>
            /// Get details of all child runs for the specified Run Id with the specified
            /// filters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runId'>
            /// The identifier of the Run.
            /// </param>
            /// <param name='filter'>
            /// Allows for filtering the collection of resources.
            /// The expression specified is evaluated for each resource in the collection,
            /// and only items where the expression evaluates to true are included in the
            /// response.
            /// </param>
            /// <param name='continuationtoken'>
            /// The continuation token to use for getting the next set of resources.
            /// </param>
            /// <param name='orderby'>
            /// The list of resource properties to use for sorting the requested resources.
            /// </param>
            /// <param name='sortorder'>
            /// The sort order of the returned resources. Not used, specify asc or desc
            /// after each property name in the OrderBy parameter. Possible values include:
            /// 'Asc', 'Desc'
            /// </param>
            /// <param name='top'>
            /// The maximum number of items in the resource collection to be included in
            /// the result.
            /// If not specified, all items are returned.
            /// </param>
            /// <param name='count'>
            /// Whether to include a count of the matching resources along with the
            /// resources returned in the response.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Run>> GetChildAsync(this IRunsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string filter = default(string), string continuationtoken = default(string), IList<string> orderby = default(IList<string>), string sortorder = default(string), int? top = default(int?), bool? count = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetChildWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, filter, continuationtoken, orderby, sortorder, top, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Run Details.
            /// </summary>
            /// <remarks>
            /// Get Run Details for a specific Run Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runId'>
            /// The identifier of the Run.
            /// </param>
            public static RunDetails GetDetails(this IRunsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId)
            {
                return operations.GetDetailsAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Run Details.
            /// </summary>
            /// <remarks>
            /// Get Run Details for a specific Run Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runId'>
            /// The identifier of the Run.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RunDetails> GetDetailsAsync(this IRunsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDetailsWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add or Modify a batch of Runs.
            /// </summary>
            /// <remarks>
            /// Add or Modify a batch of Runs for a given experiment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='requestDto'>
            /// The list of requested Run Additions/modifications in an Experiment.
            /// </param>
            public static BatchAddOrModifyRunResult BatchAddOrModify(this IRunsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, BatchAddOrModifyRunRequest requestDto = default(BatchAddOrModifyRunRequest))
            {
                return operations.BatchAddOrModifyAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, requestDto).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add or Modify a batch of Runs.
            /// </summary>
            /// <remarks>
            /// Add or Modify a batch of Runs for a given experiment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='requestDto'>
            /// The list of requested Run Additions/modifications in an Experiment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BatchAddOrModifyRunResult> BatchAddOrModifyAsync(this IRunsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, BatchAddOrModifyRunRequest requestDto = default(BatchAddOrModifyRunRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BatchAddOrModifyWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, requestDto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Run details.
            /// </summary>
            /// <remarks>
            /// Get Run details of a specific Run Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runId'>
            /// The identifier of the Run.
            /// </param>
            public static Run Get(this IRunsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId)
            {
                return operations.GetAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Run details.
            /// </summary>
            /// <remarks>
            /// Get Run details of a specific Run Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runId'>
            /// The identifier of the Run.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Run> GetAsync(this IRunsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add or Modify a Run.
            /// </summary>
            /// <remarks>
            /// Add a new Run or Modify an existing Run.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runId'>
            /// The identifier of the Run.
            /// </param>
            /// <param name='createRunDto'>
            /// The requested Run parameter Additions/modifications.
            /// </param>
            public static Run Patch(this IRunsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, CreateRun createRunDto = default(CreateRun))
            {
                return operations.PatchAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, createRunDto).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add or Modify a Run.
            /// </summary>
            /// <remarks>
            /// Add a new Run or Modify an existing Run.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runId'>
            /// The identifier of the Run.
            /// </param>
            /// <param name='createRunDto'>
            /// The requested Run parameter Additions/modifications.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Run> PatchAsync(this IRunsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, CreateRun createRunDto = default(CreateRun), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, createRunDto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete list of Tags in a Run.
            /// </summary>
            /// <remarks>
            /// Delete list of Tags from a specific Run Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runId'>
            /// The identifier of the Run.
            /// </param>
            /// <param name='tags'>
            /// The requested tags list to be deleted.
            /// </param>
            public static Run DeleteTags(this IRunsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, IList<string> tags = default(IList<string>))
            {
                return operations.DeleteTagsAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete list of Tags in a Run.
            /// </summary>
            /// <remarks>
            /// Delete list of Tags from a specific Run Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runId'>
            /// The identifier of the Run.
            /// </param>
            /// <param name='tags'>
            /// The requested tags list to be deleted.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Run> DeleteTagsAsync(this IRunsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, IList<string> tags = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteTagsWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all Runs for a specific Experiment.
            /// </summary>
            /// <remarks>
            /// Get all Runs for a specific Experiment with the specified query filters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='queryParams'>
            /// Query parameters for data sorting and filtering.
            /// </param>
            public static IPage<Run> GetByQuery(this IRunsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, QueryParams queryParams = default(QueryParams))
            {
                return operations.GetByQueryAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, queryParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all Runs for a specific Experiment.
            /// </summary>
            /// <remarks>
            /// Get all Runs for a specific Experiment with the specified query filters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='queryParams'>
            /// Query parameters for data sorting and filtering.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Run>> GetByQueryAsync(this IRunsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, QueryParams queryParams = default(QueryParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByQueryWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, queryParams, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get details of all child runs.
            /// </summary>
            /// <remarks>
            /// Get details of all child runs for the specified Run Id with the specified
            /// filters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Run> GetChildNext(this IRunsOperations operations, string nextPageLink)
            {
                return operations.GetChildNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get details of all child runs.
            /// </summary>
            /// <remarks>
            /// Get details of all child runs for the specified Run Id with the specified
            /// filters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Run>> GetChildNextAsync(this IRunsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetChildNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all Runs for a specific Experiment.
            /// </summary>
            /// <remarks>
            /// Get all Runs for a specific Experiment with the specified query filters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Run> GetByQueryNext(this IRunsOperations operations, string nextPageLink)
            {
                return operations.GetByQueryNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all Runs for a specific Experiment.
            /// </summary>
            /// <remarks>
            /// Get all Runs for a specific Experiment with the specified query filters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Run>> GetByQueryNextAsync(this IRunsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByQueryNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
