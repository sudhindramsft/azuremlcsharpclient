// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.MachineLearning.Services
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MLModelsOperations.
    /// </summary>
    public static partial class MLModelsOperationsExtensions
    {
            /// <summary>
            /// Gets a model.
            /// </summary>
            /// <remarks>
            /// Gets a model by model id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='id'>
            /// The model id.
            /// </param>
            public static Model QueryById(this IMLModelsOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, string id)
            {
                return operations.QueryByIdAsync(subscriptionId, resourceGroup, workspace, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a model.
            /// </summary>
            /// <remarks>
            /// Gets a model by model id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='id'>
            /// The model id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Model> QueryByIdAsync(this IMLModelsOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryByIdWithHttpMessagesAsync(subscriptionId, resourceGroup, workspace, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete the specified Model.
            /// </summary>
            /// <remarks>
            /// Deletes a model if it exists.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='id'>
            /// The model id.
            /// </param>
            public static void Delete(this IMLModelsOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, string id)
            {
                operations.DeleteAsync(subscriptionId, resourceGroup, workspace, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the specified Model.
            /// </summary>
            /// <remarks>
            /// Deletes a model if it exists.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='id'>
            /// The model id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IMLModelsOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(subscriptionId, resourceGroup, workspace, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Patch a specific model.
            /// </summary>
            /// <remarks>
            /// Updates an existing model with the specified patch.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='id'>
            /// The model id.
            /// </param>
            /// <param name='patch'>
            /// The payload that is used to patch the model.
            /// </param>
            public static Model Patch(this IMLModelsOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, string id, IList<JsonPatchOperation> patch)
            {
                return operations.PatchAsync(subscriptionId, resourceGroup, workspace, id, patch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patch a specific model.
            /// </summary>
            /// <remarks>
            /// Updates an existing model with the specified patch.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='id'>
            /// The model id.
            /// </param>
            /// <param name='patch'>
            /// The payload that is used to patch the model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Model> PatchAsync(this IMLModelsOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, string id, IList<JsonPatchOperation> patch, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchWithHttpMessagesAsync(subscriptionId, resourceGroup, workspace, id, patch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query the list of Models in a workspace.
            /// </summary>
            /// <remarks>
            /// The result list can be filtered using tag and name. If no filter is passed,
            /// the query lists all the Models in the given workspace. The returned list is
            /// paginated and the count of items in each page is an optional parameter.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='name'>
            /// The object name.
            /// </param>
            /// <param name='framework'>
            /// The framework.
            /// </param>
            /// <param name='description'>
            /// The object description.
            /// </param>
            /// <param name='count'>
            /// The number of items to retrieve in a page.
            /// </param>
            /// <param name='skipToken'>
            /// The continuation token to retrieve the next page.
            /// </param>
            /// <param name='tags'>
            /// A set of tags with which to filter the returned models.
            /// It is a comma separated string of tags key or tags key=value
            /// Example: tagKey1,tagKey2,tagKey3=value3
            /// </param>
            /// <param name='properties'>
            /// A set of properties with which to filter the returned models.
            /// It is a comma separated string of properties key and/or properties
            /// key=value
            /// Example: propKey1,propKey2,propKey3=value3
            /// </param>
            /// <param name='runId'>
            /// The runId which created the model.
            /// </param>
            /// <param name='orderBy'>
            /// An option to specify how the models are ordered in the response. Possible
            /// values include: 'CreatedAtDesc', 'CreatedAtAsc', 'UpdatedAtDesc',
            /// 'UpdatedAtAsc'
            /// </param>
            public static IPage<Model> ListQuery(this IMLModelsOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, string name = default(string), string framework = default(string), string description = default(string), int? count = default(int?), string skipToken = default(string), string tags = default(string), string properties = default(string), string runId = default(string), string orderBy = default(string))
            {
                return operations.ListQueryAsync(subscriptionId, resourceGroup, workspace, name, framework, description, count, skipToken, tags, properties, runId, orderBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query the list of Models in a workspace.
            /// </summary>
            /// <remarks>
            /// The result list can be filtered using tag and name. If no filter is passed,
            /// the query lists all the Models in the given workspace. The returned list is
            /// paginated and the count of items in each page is an optional parameter.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='name'>
            /// The object name.
            /// </param>
            /// <param name='framework'>
            /// The framework.
            /// </param>
            /// <param name='description'>
            /// The object description.
            /// </param>
            /// <param name='count'>
            /// The number of items to retrieve in a page.
            /// </param>
            /// <param name='skipToken'>
            /// The continuation token to retrieve the next page.
            /// </param>
            /// <param name='tags'>
            /// A set of tags with which to filter the returned models.
            /// It is a comma separated string of tags key or tags key=value
            /// Example: tagKey1,tagKey2,tagKey3=value3
            /// </param>
            /// <param name='properties'>
            /// A set of properties with which to filter the returned models.
            /// It is a comma separated string of properties key and/or properties
            /// key=value
            /// Example: propKey1,propKey2,propKey3=value3
            /// </param>
            /// <param name='runId'>
            /// The runId which created the model.
            /// </param>
            /// <param name='orderBy'>
            /// An option to specify how the models are ordered in the response. Possible
            /// values include: 'CreatedAtDesc', 'CreatedAtAsc', 'UpdatedAtDesc',
            /// 'UpdatedAtAsc'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Model>> ListQueryAsync(this IMLModelsOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, string name = default(string), string framework = default(string), string description = default(string), int? count = default(int?), string skipToken = default(string), string tags = default(string), string properties = default(string), string runId = default(string), string orderBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueryWithHttpMessagesAsync(subscriptionId, resourceGroup, workspace, name, framework, description, count, skipToken, tags, properties, runId, orderBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Register a model.
            /// </summary>
            /// <remarks>
            /// Register the model provided.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='model'>
            /// The payload that is used to register the model.
            /// </param>
            public static Model Register(this IMLModelsOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, Model model)
            {
                return operations.RegisterAsync(subscriptionId, resourceGroup, workspace, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Register a model.
            /// </summary>
            /// <remarks>
            /// Register the model provided.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='model'>
            /// The payload that is used to register the model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Model> RegisterAsync(this IMLModelsOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, Model model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegisterWithHttpMessagesAsync(subscriptionId, resourceGroup, workspace, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve the metrics for a Model.
            /// </summary>
            /// <remarks>
            /// The operational events collected for the Model are returned.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='id'>
            /// The Model Id.
            /// </param>
            /// <param name='startDate'>
            /// The start date from which to retrieve metrics, ISO 8601 literal format.
            /// </param>
            /// <param name='endDate'>
            /// The end date from which to retrieve metrics, ISO 8601 literal format.
            /// </param>
            public static ModelOperationalState GetMetrics(this IMLModelsOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, string id, string startDate = default(string), string endDate = default(string))
            {
                return operations.GetMetricsAsync(subscriptionId, resourceGroup, workspace, id, startDate, endDate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve the metrics for a Model.
            /// </summary>
            /// <remarks>
            /// The operational events collected for the Model are returned.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroup'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspace'>
            /// The name of the workspace.
            /// </param>
            /// <param name='id'>
            /// The Model Id.
            /// </param>
            /// <param name='startDate'>
            /// The start date from which to retrieve metrics, ISO 8601 literal format.
            /// </param>
            /// <param name='endDate'>
            /// The end date from which to retrieve metrics, ISO 8601 literal format.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ModelOperationalState> GetMetricsAsync(this IMLModelsOperations operations, System.Guid subscriptionId, string resourceGroup, string workspace, string id, string startDate = default(string), string endDate = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMetricsWithHttpMessagesAsync(subscriptionId, resourceGroup, workspace, id, startDate, endDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query the list of Models in a workspace.
            /// </summary>
            /// <remarks>
            /// The result list can be filtered using tag and name. If no filter is passed,
            /// the query lists all the Models in the given workspace. The returned list is
            /// paginated and the count of items in each page is an optional parameter.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Model> ListQueryNext(this IMLModelsOperations operations, string nextPageLink)
            {
                return operations.ListQueryNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query the list of Models in a workspace.
            /// </summary>
            /// <remarks>
            /// The result list can be filtered using tag and name. If no filter is passed,
            /// the query lists all the Models in the given workspace. The returned list is
            /// paginated and the count of items in each page is an optional parameter.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Model>> ListQueryNextAsync(this IMLModelsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListQueryNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
