// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.MachineLearning.Services
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RunArtifactsOperations.
    /// </summary>
    public static partial class RunArtifactsOperationsExtensions
    {
            /// <summary>
            /// Get Artifacts in a container.
            /// </summary>
            /// <remarks>
            /// Get Artifacts in container for a specific Run Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runId'>
            /// The identifier of the Run.
            /// </param>
            /// <param name='continuationToken'>
            /// The Continuation Token.
            /// </param>
            public static IPage<Artifact> ListInContainer(this IRunArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string continuationToken = default(string))
            {
                return operations.ListInContainerAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, continuationToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Artifacts in a container.
            /// </summary>
            /// <remarks>
            /// Get Artifacts in container for a specific Run Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runId'>
            /// The identifier of the Run.
            /// </param>
            /// <param name='continuationToken'>
            /// The Continuation Token.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Artifact>> ListInContainerAsync(this IRunArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string continuationToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInContainerWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, continuationToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Artifacts in the provided path.
            /// </summary>
            /// <remarks>
            /// Get Artifacts in the provided path for a specific Run Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runId'>
            /// The identifier of the Run.
            /// </param>
            /// <param name='path'>
            /// The Artifact Path.
            /// </param>
            /// <param name='continuationToken'>
            /// The Continuation Token.
            /// </param>
            public static IPage<Artifact> ListInPath(this IRunArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string path = default(string), string continuationToken = default(string))
            {
                return operations.ListInPathAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, path, continuationToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Artifacts in the provided path.
            /// </summary>
            /// <remarks>
            /// Get Artifacts in the provided path for a specific Run Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runId'>
            /// The identifier of the Run.
            /// </param>
            /// <param name='path'>
            /// The Artifact Path.
            /// </param>
            /// <param name='continuationToken'>
            /// The Continuation Token.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Artifact>> ListInPathAsync(this IRunArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string path = default(string), string continuationToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInPathWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, path, continuationToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Artifact by Id.
            /// </summary>
            /// <remarks>
            /// Get Artifact for a specific Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runId'>
            /// The identifier of the Run.
            /// </param>
            /// <param name='path'>
            /// The Artifact Path.
            /// </param>
            public static Artifact GetById(this IRunArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string path = default(string))
            {
                return operations.GetByIdAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Artifact by Id.
            /// </summary>
            /// <remarks>
            /// Get Artifact for a specific Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runId'>
            /// The identifier of the Run.
            /// </param>
            /// <param name='path'>
            /// The Artifact Path.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Artifact> GetByIdAsync(this IRunArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Artifact content information.
            /// </summary>
            /// <remarks>
            /// Get Artifact content information for give Run Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runId'>
            /// The identifier of the Run.
            /// </param>
            /// <param name='path'>
            /// The Artifact Path.
            /// </param>
            public static ArtifactContentInformation GetContentInformation(this IRunArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string path = default(string))
            {
                return operations.GetContentInformationAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Artifact content information.
            /// </summary>
            /// <remarks>
            /// Get Artifact content information for give Run Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runId'>
            /// The identifier of the Run.
            /// </param>
            /// <param name='path'>
            /// The Artifact Path.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ArtifactContentInformation> GetContentInformationAsync(this IRunArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetContentInformationWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get URI of an Artifact.
            /// </summary>
            /// <remarks>
            /// Get URI of an Artifact for a specific Run Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runId'>
            /// The identifier of the Run.
            /// </param>
            /// <param name='path'>
            /// The Artifact Path.
            /// </param>
            public static string GetSasUri(this IRunArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string path = default(string))
            {
                return operations.GetSasUriAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, path).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get URI of an Artifact.
            /// </summary>
            /// <remarks>
            /// Get URI of an Artifact for a specific Run Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runId'>
            /// The identifier of the Run.
            /// </param>
            /// <param name='path'>
            /// The Artifact Path.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetSasUriAsync(this IRunArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string path = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSasUriWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, path, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get SAS of an Artifact.
            /// </summary>
            /// <remarks>
            /// Get SAS of an Artifact in the specified path.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runId'>
            /// The identifier of the Run.
            /// </param>
            /// <param name='path'>
            /// The Artifact Path.
            /// </param>
            /// <param name='continuationToken'>
            /// The Continuation Token.
            /// </param>
            public static IPage<ArtifactContentInformation> ListSasByPrefix(this IRunArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string path = default(string), string continuationToken = default(string))
            {
                return operations.ListSasByPrefixAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, path, continuationToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get SAS of an Artifact.
            /// </summary>
            /// <remarks>
            /// Get SAS of an Artifact in the specified path.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runId'>
            /// The identifier of the Run.
            /// </param>
            /// <param name='path'>
            /// The Artifact Path.
            /// </param>
            /// <param name='continuationToken'>
            /// The Continuation Token.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ArtifactContentInformation>> ListSasByPrefixAsync(this IRunArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, string path = default(string), string continuationToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSasByPrefixWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, path, continuationToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a batch of empty Artifacts.
            /// </summary>
            /// <remarks>
            /// Create a batch of empty Artifacts in a specific Run.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runId'>
            /// The identifier of the Run.
            /// </param>
            /// <param name='artifactPaths'>
            /// The list of artifact paths.
            /// </param>
            public static BatchArtifactContentInformationResult BatchCreateEmptyArtifacts(this IRunArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, ArtifactPathList artifactPaths = default(ArtifactPathList))
            {
                return operations.BatchCreateEmptyArtifactsAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, artifactPaths).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a batch of empty Artifacts.
            /// </summary>
            /// <remarks>
            /// Create a batch of empty Artifacts in a specific Run.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runId'>
            /// The identifier of the Run.
            /// </param>
            /// <param name='artifactPaths'>
            /// The list of artifact paths.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BatchArtifactContentInformationResult> BatchCreateEmptyArtifactsAsync(this IRunArtifactsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, ArtifactPathList artifactPaths = default(ArtifactPathList), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BatchCreateEmptyArtifactsWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, artifactPaths, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Artifacts in a container.
            /// </summary>
            /// <remarks>
            /// Get Artifacts in container for a specific Run Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Artifact> ListInContainerNext(this IRunArtifactsOperations operations, string nextPageLink)
            {
                return operations.ListInContainerNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Artifacts in a container.
            /// </summary>
            /// <remarks>
            /// Get Artifacts in container for a specific Run Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Artifact>> ListInContainerNextAsync(this IRunArtifactsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInContainerNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Artifacts in the provided path.
            /// </summary>
            /// <remarks>
            /// Get Artifacts in the provided path for a specific Run Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Artifact> ListInPathNext(this IRunArtifactsOperations operations, string nextPageLink)
            {
                return operations.ListInPathNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Artifacts in the provided path.
            /// </summary>
            /// <remarks>
            /// Get Artifacts in the provided path for a specific Run Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Artifact>> ListInPathNextAsync(this IRunArtifactsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInPathNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get SAS of an Artifact.
            /// </summary>
            /// <remarks>
            /// Get SAS of an Artifact in the specified path.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ArtifactContentInformation> ListSasByPrefixNext(this IRunArtifactsOperations operations, string nextPageLink)
            {
                return operations.ListSasByPrefixNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get SAS of an Artifact.
            /// </summary>
            /// <remarks>
            /// Get SAS of an Artifact in the specified path.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ArtifactContentInformation>> ListSasByPrefixNextAsync(this IRunArtifactsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSasByPrefixNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
