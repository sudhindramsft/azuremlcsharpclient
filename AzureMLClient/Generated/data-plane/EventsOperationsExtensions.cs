// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.MachineLearning.Services
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for EventsOperations.
    /// </summary>
    public static partial class EventsOperationsExtensions
    {
            /// <summary>
            /// Batch post event data.
            /// </summary>
            /// <remarks>
            /// Post event data to a specific Run Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='batchEventCommand'>
            /// The batch of Event details.
            /// </param>
            public static BatchEventCommandResult BatchPost(this IEventsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, BatchEventCommand batchEventCommand = default(BatchEventCommand))
            {
                return operations.BatchPostAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, batchEventCommand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Batch post event data.
            /// </summary>
            /// <remarks>
            /// Post event data to a specific Run Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='batchEventCommand'>
            /// The batch of Event details.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BatchEventCommandResult> BatchPostAsync(this IEventsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, BatchEventCommand batchEventCommand = default(BatchEventCommand), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BatchPostWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, batchEventCommand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Post event data.
            /// </summary>
            /// <remarks>
            /// Post event data to a specific Run Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runId'>
            /// The identifier of the Run.
            /// </param>
            /// <param name='eventMessage'>
            /// The Event details.
            /// </param>
            public static void Post(this IEventsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, BaseEvent eventMessage = default(BaseEvent))
            {
                operations.PostAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, eventMessage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Post event data.
            /// </summary>
            /// <remarks>
            /// Post event data to a specific Run Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Azure Subscription ID.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Name of the resource group in which the workspace is located.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='experimentName'>
            /// The experiment name.
            /// </param>
            /// <param name='runId'>
            /// The identifier of the Run.
            /// </param>
            /// <param name='eventMessage'>
            /// The Event details.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostAsync(this IEventsOperations operations, System.Guid subscriptionId, string resourceGroupName, string workspaceName, string experimentName, string runId, BaseEvent eventMessage = default(BaseEvent), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostWithHttpMessagesAsync(subscriptionId, resourceGroupName, workspaceName, experimentName, runId, eventMessage, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
